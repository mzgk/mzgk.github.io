<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jubilee]]></title>
  <link href="http://mzgk.github.io/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-10-10T15:21:24+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSUserDefaultsの中身を確認する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/see-nsuserdefaults-data/"/>
    <updated>2014-10-02T13:52:39+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/see-nsuserdefaults-data</id>
    <content type="html"><![CDATA[<p>アプリ内で処理したNSUserDefaultsの中身を確認する方法。</p>

<!-- more -->


<ol>
<li>デバイスをXcodeに接続する</li>
<li>メニューバー &ndash;> Window &ndash;> OrganizerからOrganizerを起動</li>
<li>左ペインのDEVICESで接続しているデバイスを選択し、Applicationsをクリック</li>
<li>右ペインに表示されたアプリから対象のアプリを選択</li>
<li>下ペインの Download をクリック &ndash;> 適当な場所に保存（&#8221;Bundle Identifier 日付時刻&#8221;.xcappdata）</li>
<li>ダウンロードしたファイルを右クリック &ndash;> パッケージの内容を表示</li>
<li>AppData/Library/Preferences/&ldquo;Bundle Identifier&rdquo;.plist をダブルクリック</li>
<li>Xcodeが起動し、中身（Key , Type , Value）が確認できる</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIButtonのタイトル位置を調整する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/uibutton-title-align/"/>
    <updated>2014-10-02T13:13:05+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/uibutton-title-align</id>
    <content type="html"><![CDATA[<p>UIButtonのタイトルはデフォルトでは中央配置になっているが、これを左詰めや右詰めにする方法。</p>

<!-- more -->


<h2>StoryBoard</h2>

<p>StoryBoardでは、スクリーンショットに書いてある部分で設定が可能。
<img src="http://mzgk.github.io/images/2014/1002/UIButton-title.png" title="ボタンタイトル位置" alt="attribute" /></p>

<h2>Code</h2>

<p>コードでは以下で設定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 左詰め</span>
</span><span class='line'><span class="n">_button</span><span class="p">.</span><span class="n">contentHorizontalAlignment</span> <span class="o">=</span> <span class="n">UIControlContentHorizontalAlignmentLeft</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 右詰め</span>
</span><span class='line'><span class="n">_button</span><span class="p">.</span><span class="n">contentHorizontalAlignment</span> <span class="o">=</span> <span class="n">UIControlContentHorizontalAlignmentRight</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p>その他の設定方法はここが参考になりました。<br/>
<a href="http://web-terminal.blogspot.jp/2013/01/uibutton.html">http://web-terminal.blogspot.jp/2013/01/uibutton.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS6でAirPlay（ミラーリング）]]></title>
    <link href="http://mzgk.github.io/blog/2014/ios6-airplay-mirroring/"/>
    <updated>2014-09-30T17:22:09+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/ios6-airplay-mirroring</id>
    <content type="html"><![CDATA[<p>iOS6でAirPlayのミラーリング機能を使用する。<br/>
iOS7とは起動場所が違うので注意。</p>

<!-- more -->


<h2>ミラーリング</h2>

<ul>
<li>iOS6デバイスとAppleTVを同一WiFiに接続する</li>
<li>接続が完了したら、iOS6デバイスで以下の操作

<ul>
<li>ホームボタンx2</li>
<li>右スワイプx2</li>
<li>AirPlayマークをタップ</li>
<li>AppleTVを選択</li>
<li>ミラーリングをON</li>
</ul>
</li>
</ul>


<h2>ポケットWiFi</h2>

<p>URoadの契約が切れたモバイルWiFiを使用する場合、WiFiの接続は「設定 &ndash;> Wi-Fi &ndash;> ネットワークを選択 &ndash;> URoad〜 &ndash;> 自動ログインをオフ」。<br/>
最後の「自動ログインをオフ」がキモ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指定時間後に処理を行う]]></title>
    <link href="http://mzgk.github.io/blog/2014/run-at-a-specified-time-after/"/>
    <updated>2014-09-09T17:21:18+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/run-at-a-specified-time-after</id>
    <content type="html"><![CDATA[<p>NSTimerを使用して、指定時間後に処理を実行させる方法。<br/>
サンプルは、ボタンをタップしたら１秒後に処理を実行するサンプル。</p>

<!-- more -->




<figure class='code'><figcaption><span>ViewController.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">adjustButton:</span><span class="p">(</span><span class="n">UIButton</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// タイマー処理に引継ぐデータを格納</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">userInfo</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;duration&quot;</span><span class="o">:</span><span class="n">_durationField</span><span class="p">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>                               <span class="s">@&quot;delay&quot;</span><span class="o">:</span><span class="n">_delayField</span><span class="p">.</span><span class="n">text</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// タイマー設定</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval:</span><span class="mf">1.0</span>                     <span class="c1">// 1秒後</span>
</span><span class='line'>                                     <span class="nl">target:</span><span class="n">self</span>                    <span class="c1">// 呼び出すメソッドのインスタンス</span>
</span><span class='line'>                                   <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">doTimer:</span><span class="p">)</span>     <span class="c1">// 呼び出すメソッド</span>
</span><span class='line'>                                   <span class="nl">userInfo:</span><span class="n">userInfo</span>                <span class="c1">// 引き渡すデータ</span>
</span><span class='line'>                                    <span class="nl">repeats:</span><span class="n">NO</span><span class="p">];</span>                    <span class="c1">// 繰り返し</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// タイマー処理（この形式であること）</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doTimer:</span><span class="p">(</span><span class="n">NSTimer</span> <span class="o">*</span><span class="p">)</span><span class="nv">timer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// データの取り出し</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">duration</span> <span class="o">=</span> <span class="p">[(</span><span class="n">timer</span><span class="p">.</span><span class="n">userInfo</span><span class="p">)[</span><span class="s">@&quot;duration&quot;</span><span class="p">]</span><span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">delay</span> <span class="o">=</span> <span class="p">[(</span><span class="n">timer</span><span class="p">.</span><span class="n">userInfo</span><span class="p">)[</span><span class="s">@&quot;delay&quot;</span><span class="p">]</span><span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// やりたい処理</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">goalAnimationWithDuration:</span><span class="n">duration</span> <span class="nl">andDelay:</span><span class="n">delay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viewのプロパティ値を変化させてアニメーションをつくる]]></title>
    <link href="http://mzgk.github.io/blog/2014/view-animation/"/>
    <updated>2014-09-09T15:29:12+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/view-animation</id>
    <content type="html"><![CDATA[<p>UIViewクラスの <code>animateWithDuration:delay:options:animations:completion</code> メソッドを使うと、ビューのプロパティを変化させてアニメーションを作成することができる。<br/>
このサンプルでは、ビューが下に50移動する動きを繰り返すアニメーション。</p>

<!-- more -->




<figure class='code'><figcaption><span>ViewController.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 座標がとれるのはviewDidAppearのとき</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">centerX</span> <span class="o">=</span> <span class="n">_baseView</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">centerY</span> <span class="o">=</span> <span class="n">_baseView</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// アニメーションのオプション</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptions</span> <span class="n">animeOptions</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionCurveEaseInOut</span> <span class="o">|</span>   <span class="c1">// 加速して開始・減速して終了（イーズインアウト）</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionAutoreverse</span> <span class="o">|</span>      <span class="c1">// 自動逆再生</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionRepeat</span><span class="p">;</span>            <span class="c1">// 繰り返し</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 処理</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">1.0</span>     <span class="c1">// アニメの秒数</span>
</span><span class='line'>                          <span class="nl">delay:</span><span class="mf">2.0</span>     <span class="c1">// 開始待ち時間</span>
</span><span class='line'>                        <span class="nl">options:</span><span class="n">animeOptions</span>
</span><span class='line'>                     <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>      <span class="c1">// 変化させるプロパティ</span>
</span><span class='line'>                         <span class="n">_baseView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">centerX</span><span class="p">,</span> <span class="n">centerY</span><span class="o">+</span><span class="mi">50</span><span class="p">);</span>
</span><span class='line'>                     <span class="p">}</span>
</span><span class='line'>                     <span class="nl">completion:</span><span class="nb">nil</span>     <span class="c1">// アニメーション完了時に行う処理</span>
</span><span class='line'>                     <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>変化させることができるプロパティ</h3>

<ul>
<li>frame</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>backgroundColor</li>
<li>contentStretch</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AdHocビルド版のビルドを行う]]></title>
    <link href="http://mzgk.github.io/blog/2014/adhoc-build/"/>
    <updated>2014-09-05T15:30:03+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/adhoc-build</id>
    <content type="html"><![CDATA[<p>TestFlightで配布できるように、アプリをAdHoc版でビルドする方法。</p>

<!-- more -->


<h2>AdHoc用のプロビジョニングプロファイルを作成する</h2>

<h3>デバイス登録</h3>

<p>配布したいデバイスが未登録の場合に実施。<br/>
端末がそばにない場合は、Test Flightで収集しあとから登録でも可。</p>

<ol>
<li>Apple Developer にログイン</li>
<li>Certificates, Identifiers &amp; Profiles &ndash;> iOS Apps &ndash;> Devices</li>
<li>右上の＋をクリック</li>
<li>Register DeviceでName:（任意）とUDIDを登録</li>
<li>Register Multiple Devicesでは、ファイルに書くことで一括登録が可能</li>
</ol>


<h3>プロビジョニングプロファイルの作成</h3>

<ol>
<li>Apple Developer にログイン</li>
<li>Certificates, Identifiers &amp; Profiles &ndash;> iOS Apps &ndash;> Provisioning Profiles</li>
<li>Distribution &ndash;> 右上の＋</li>
<li>Distribution &ndash;> Ad Hocを選択 &ndash;> App IDを選択</li>
<li>Select certificates. &ndash;> 証明書を選択（タイプはApp Store and ad Hoc）</li>
<li>Select devices. &ndash;> 配布したい端末を選択</li>
<li>Name this profile and generate. &ndash;> Profile Name:（任意の名前）</li>
<li>Generate</li>
<li>Download</li>
<li>ダウンロードした〜.mobileprovisionをクリックし、キーチェーンへ登録</li>
</ol>


<h3>確認</h3>

<ol>
<li>Xcode &ndash;> Preferences &ndash;> Accounts &ndash;> ViewDetails</li>
<li>プロビジョニングプロファイルの一覧に表示されること</li>
</ol>


<h2>アドホック用の.ipaをビルド</h2>

<ol>
<li>ビルドするプロジェクトでXcodeを起動</li>
<li>Product &ndash;> Archive（実機接続、またはiOS Deviceを選択していれば可。シュミレーター不可）</li>
<li>Organaizerが開いたら、ビルドしたアプリを選択</li>
<li>Distribute&hellip;をクリック</li>
<li>Save for Enterprise or Ad Hoc Deploymentを選択</li>
<li>Provisioning Profile: 作成したAdHoc用のプロビジョニングプロファイルを選択</li>
<li>Exportで.ipaが作成される</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS端末のUDIDの確認方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/confirm-udid/"/>
    <updated>2014-09-05T14:19:31+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/confirm-udid</id>
    <content type="html"><![CDATA[<p>iOS端末のUDIDを確認する方法。以下３パターン。</p>

<ul>
<li>Xcode</li>
<li>iTunes</li>
<li>TestFlight</li>
</ul>


<!-- more -->


<h2>Xcodeを使用する方法</h2>

<ol>
<li>Xcodeを起動し、端末を接続</li>
<li>Window &ndash;> Organizer &ndash;> Devicesタブ</li>
<li>左側のDEVICESから該当端末を選択</li>
<li>Identifierの横の文字列がUDID</li>
</ol>


<h2>iTunesを使用する方法</h2>

<ol>
<li>iTunesを起動し、端末を接続</li>
<li>右側のデバイスから該当の端末を選択</li>
<li>表示されたiPhoneの概要画面で、シリアル番号をクリック</li>
<li>UDIDに表示が変わる</li>
</ol>


<h2>TestFlightを使用する方法</h2>

<p>詳細は以下を参照</p>

<ul>
<li>ここ：<a href="http://mzgk.github.io/blog/2014/invite-to-testflight/">http://mzgk.github.io/blog/2014/invite-to-testflight/</a></li>
<li>ここ：<a href="http://mzgk.github.io/blog/2014/invite-testflight2/">http://mzgk.github.io/blog/2014/invite-testflight2/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestFlight：2（プロビジョニングプロファイル〜アプリ配信）]]></title>
    <link href="http://mzgk.github.io/blog/2014/invite-testflight2/"/>
    <updated>2014-09-05T13:02:28+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/invite-testflight2</id>
    <content type="html"><![CDATA[<p>TestFlightにユーザーを招待する方法。<br/>
身近にユーザーがいて、端末のUDID登録等がすぐにできる場合は一緒に進められるが、
配布したいユーザーが近くにおらず、端末のUDIDを教えてもらうことができない場合の方法。</p>

<ul>
<li>招待したユーザーの端末のUDIDを追加</li>
<li>プロビジョニングプロファイルをアップロード</li>
<li>ユーザーに配信</li>
</ul>


<!-- more -->


<h2>管理者：iOS Developerにデバイス登録</h2>

<ol>
<li>招待したユーザーがTest Flightにサインアップし端末を登録すると、管理者にメールが届く</li>
<li>Apple Developer にログイン</li>
<li>Certificates, Identifiers &amp; Profiles &ndash;> iOS Apps &ndash;> Devices</li>
<li>右上の＋をクリック</li>
<li>Register DeviceでName:（任意）とUDIDを登録</li>
<li>Register Multiple Devicesでは、ファイルに書くことで一括登録が可能</li>
</ol>


<p><img src="http://mzgk.github.io/images/2014/0905/12_mail_added_a_device.png" title="メール受信" alt="add device" />
<img src="http://mzgk.github.io/images/2014/0905/13_ios_developer_device_add.png" title="デバイス登録" alt="add device" />
<img src="http://mzgk.github.io/images/2014/0905/14_register_device.png" title="デバイス登録" alt="add device" /></p>

<h2>管理者：プロビジョニングプロファイルの作成</h2>

<ol>
<li>Apple Developer にログイン</li>
<li>Certificates, Identifiers &amp; Profiles &ndash;> iOS Apps &ndash;> Provisioning Profiles</li>
<li>対象のアプリで使用するプロビジョニングプロファイルを選択し、Edit</li>
<li>端末を追加し、Generate &ndash;> Download</li>
</ol>


<p><img src="http://mzgk.github.io/images/2014/0905/15_edit_provisioning_profile.png" title="プロビジョニングプロファイル" alt="provisioning profile" />
<img src="http://mzgk.github.io/images/2014/0905/16_provisioning_download.png" title="ダウンロード" alt="provisioning profile" /></p>

<h2>管理者：Test Flightへアップロード</h2>

<p>アプリの内容に変更がないのであれば、プロビジョニングプロファイルのアップロードのみで可。</p>

<ol>
<li>Test Flightへログイン</li>
<li>Apps &ndash;> Manage Your Apps &ndash;> 対象のアプリをクリック</li>
<li>Builds &ndash;> アプリをクリック</li>
<li>Permission &ndash;> ダウンロードしたプロビジョニングプロファイルをアップロード</li>
</ol>


<p><img src="http://mzgk.github.io/images/2014/0905/17_testflight_apps.png" title="アプリ選択" alt="update" />
<img src="http://mzgk.github.io/images/2014/0905/18_builds.png" title="アプリ選択" alt="update" />
<img src="http://mzgk.github.io/images/2014/0905/19_permission.png" title="アップロード" alt="update" />
<img src="http://mzgk.github.io/images/2014/0905/20_profile_upload.png" title="アップロード" alt="update" /></p>

<h2>管理者：ユーザーにアプリ配信のメール</h2>

<ol>
<li>プロビジョニングプロファイルをアップロード</li>
<li>招待したユーザーの名前がTeammates in The Provisioning Profileに表示される</li>
<li>招待したユーザーにチェックをつけて、Update &amp; Notifyをクリックでメールが送信される</li>
</ol>


<p><img src="http://mzgk.github.io/images/2014/0905/21_uploaded.png" title="メール送信" alt="send mail" />
<img src="http://mzgk.github.io/images/2014/0905/22_status.png" title="ステータス" alt="status" /></p>

<h2>ユーザー：アプリのインストール</h2>

<p>操作は <em>Safari</em> で行うこと。</p>

<ol>
<li>管理者からメールが届く</li>
<li>届いたメールのINSTALLをクリック</li>
<li>端末にプロビジョニングプロファイルがインストールされ、アプリもインストールされる
<img src="http://mzgk.github.io/images/2014/0905/23_user_install_mail.png" title="インストールメール" alt="mail" />
<img src="http://mzgk.github.io/images/2014/0905/24_profile.png" title="プロビジョニングプロファイル" alt="profile" /></li>
</ol>


<h2>管理者：確認</h2>

<ol>
<li>Test Flight上で、ユーザーがインストールしたかどうかの確認ができる
<img src="http://mzgk.github.io/images/2014/0905/25_activity.png" title="ステータスの確認" alt="status" /></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestFlight：1（ユーザーを招待する）]]></title>
    <link href="http://mzgk.github.io/blog/2014/invite-to-testflight/"/>
    <updated>2014-09-05T10:54:38+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/invite-to-testflight</id>
    <content type="html"><![CDATA[<p>TestFlightにユーザーを招待する方法。<br/>
身近にユーザーがいて、端末のUDID登録等がすぐにできる場合は一緒に進められるが、
配布したいユーザーが近くにおらず、端末のUDIDを教えてもらうことができない場合の方法。<br/>
まずは、ユーザーの招待まで。</p>

<!-- more -->


<h2>管理者</h2>

<ol>
<li>管理者は、ブラウザを起動しTestFlightにログインする</li>
<li>Invite Peopleから招待状を送付する</li>
</ol>


<p><img src="http://mzgk.github.io/images/2014/0905/1_invite_people.png" title="招待" alt="invite_people1" />
<img src="http://mzgk.github.io/images/2014/0905/2_invite_a_teammate.png" title="メールの送付" alt="invite_people2" />
<img src="http://mzgk.github.io/images/2014/0905/3_manage_invites_in.png" title="ステータス" alt="invite_people3" /></p>

<h2>招待を受けたユーザー</h2>

<p>操作は <em>テストに使う端末</em> で行う。<br/>
操作は <em>Safari</em> でやらないとエラーになる（chrome等はダメ）。<br/>
gmail.appで受けてchromeが開いた場合は、アドレスをコピー &ndash;> safariで開いて操作<br/>
safariも <em>プライベートブラウジングはオフ</em> にしておくこと</p>

<ol>
<li>ユーザーにメールが届く</li>
<li>メールのAcceptをタップ</li>
<li>ユーザーの情報を入力し、Sign Up</li>
<li>デバイスの登録を行う</li>
<li>プロファイルのインストールを促されるのでインストール</li>
<li>管理者からアプリインストールのメールがくるのを待つ</li>
<li>プロファイルの確認は、設定アプリ起動 &ndash;> 一般 &ndash;> プロファイルで確認できる</li>
</ol>


<p><img src="http://mzgk.github.io/images/2014/0905/4_user_mail.png" title="メール受信" alt="user_signup" />
<img src="http://mzgk.github.io/images/2014/0905/5_user_sign_up.png" title="Sign Up" alt="user_signup" />
<img src="http://mzgk.github.io/images/2014/0905/7_user_connect_your_device.png" title="デバイス登録" alt="user_signup" />
<img src="http://mzgk.github.io/images/2014/0905/8_profile_install.png" title="インストール" alt="user_signup" />
<img src="http://mzgk.github.io/images/2014/0905/9_profile_installed.png" title="インストール完了" alt="user_signup" />
<img src="http://mzgk.github.io/images/2014/0905/10_view_all_apps.png" title="アプリインストール待ち" alt="user_signup" />
<img src="http://mzgk.github.io/images/2014/0905/11_setting_profile.png" title="プロファイルの確認" alt="user_signup" /></p>

<h2>管理者</h2>

<p>ユーザーがSign Upしたかどうかは、この画面で確認できる。</p>

<p><img src="http://mzgk.github.io/images/2014/0905/6_manage_invites_in.png" title="Status" alt="user_signup" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XcodeのCtrl＋ドラッグとBetterTouch Tool]]></title>
    <link href="http://mzgk.github.io/blog/2014/xcode-bettertouchtool/"/>
    <updated>2014-09-02T19:14:18+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/xcode-bettertouchtool</id>
    <content type="html"><![CDATA[<p>BetterTouch Toolの設定を変更したら、XcodeでUI部品のコントロール＋ドラッグ接続が効かなくなった。<br/>
その対処法。ちなみに原因は不明。</p>

<h3>環境</h3>

<ul>
<li>OS X : 10.9.4</li>
<li>Xcode : 5.1.1</li>
<li>BetterTouch Tool : 0.9977</li>
</ul>


<h3>経緯</h3>

<ul>
<li>BetterTouch Toolで、ChromeとSafariに以下のジェスチャーを設定</li>
<li>Two Finger Tap Tip Right / Left：タブの移動</li>
<li>三本指のうち二本指をトラックパッドに置いた状態で、一本指でタップで表示するタブを移動</li>
</ul>


<h3>解決方法</h3>

<p>XCodeではBetterTouch Toolを使用していないので、XCodeを使用中はBTTが無視するように設定。</p>

<ul>
<li>XCodeを起動（アクティブ状態）</li>
<li>メニューバー &ndash;> BetterTouch Toolのアイコン &ndash;> Disable BTT For Current Appをクリック</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITextFieldでキーボード閉じる方法３つ]]></title>
    <link href="http://mzgk.github.io/blog/2014/textfield-hide-keyboard/"/>
    <updated>2014-09-02T18:08:54+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/textfield-hide-keyboard</id>
    <content type="html"><![CDATA[<p>UITextFieldで、表示されているキーボードを閉じる方法のまとめ。<br/>
パターン的には３つ。</p>

<ol>
<li>UITextFieldのアクションを使用（リターンキーで閉じる）</li>
<li>UITextFieldのデリゲートを使用（リターンキーで閉じる）</li>
<li>Tap Gestureを使用（他の場所をタップで閉じる）</li>
</ol>


<!-- more -->


<h2>UITextFieldのアクションを使用（リターンキーで閉じる）</h2>

<p>StoryBoardを使った、一番お手軽なパターン。<br/>
キーボードのリターンキーで、キーボードが閉じる。</p>

<ul>
<li>StoryBoard上でUITextFieldを右クリック</li>
<li>Sent Events &ndash;> Did End On Exitを選択</li>
<li>Ctrl + ドラッグでアクション接続</li>
<li>IBActionのメソッド内に処理は不要</li>
</ul>


<h2>UITextFieldのアクションを使用（リターンキーで閉じる）</h2>

<p>よく見かけるパターン。<br/>
キーボードのリターンキーで、キーボードが閉じる。</p>

<ul>
<li><UITextFieldDelegate>プロトコルを接続（.hの@interface部分）</li>
<li>.mにデリゲートメソッドを追加</li>
<li>処理を記述</li>
</ul>


<figure class='code'><figcaption><span>ViewController.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span><span class="o">&lt;</span><span class="n">UITextFieldDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ViewController.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// デリゲートを設定</span>
</span><span class='line'>    <span class="n">_textField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">textFieldShouldReturn:</span><span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// これか</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">endEditing:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// これ</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_textField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tap Gestureを使用（他の場所をタップで閉じる）</h2>

<p>キーボードのリターンキーではなく、他の場所をタップした際にキーボードを閉じる。</p>

<ul>
<li>StoryBoard上で、ViewControllerに Tap GestureRecognizer を追加</li>
<li>Ctrl + ドラッグでアクション接続</li>
<li>処理を記述</li>
</ul>


<figure class='code'><figcaption><span>ViewController.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">onTapView:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// これか</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">endEditing:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// こんな感じ</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">_textField</span> <span class="n">isFirstResponder</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_textField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文字列の大小比較]]></title>
    <link href="http://mzgk.github.io/blog/2014/string-compare/"/>
    <updated>2014-09-01T19:14:57+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/string-compare</id>
    <content type="html"><![CDATA[<p>文字列を大小比較する場合は、以下を使用する。</p>

<figure class='code'><figcaption><span>文字列の大小比較</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSComparisonResult</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="err">比較元</span> <span class="nl">compare:</span><span class="err">比較相手</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NSOrderedAscending</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">結果：元　＜　相手：</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">結果：元　＝　相手：</span><span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NSOrderedDescending</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">結果：元　＞　相手：</span><span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>単純に等しいかどうかの判断であれば <code>isEqualToString:</code> を使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSLog()を記述せずに、ブレークポイントでログを出力する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/breakpoint-automessage/"/>
    <updated>2014-08-29T15:26:02+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/breakpoint-automessage</id>
    <content type="html"><![CDATA[<p>ちょっとした確認をしたいときや、NSLog()を残したくない場合などに、ブレークポイントを使ってコンソールにログを出力する方法。<br/>
Xcodeのブレークポイントの設定だけで、停止せずにログを出力できる。</p>

<!-- more -->


<h2>ブレークポイント</h2>

<ul>
<li>ブレークポイントを設定</li>
<li>右クリック &ndash;> Edit Breakpoint&hellip;</li>
<li>Action &ndash;> Log Message</li>
<li>入力欄に出力したい文言を記述</li>
<li>変数の値を出力したい場合は、@変数名@</li>
<li>Options &ndash;> Automatically〜にチェックを入れると止まらずにコンソールに出力する</li>
</ul>


<p><img src="http://mzgk.github.io/images/2014/0829/breakpoint.png" alt="設定方法" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSLog()のリリース時停止漏れを防ぐマクロ]]></title>
    <link href="http://mzgk.github.io/blog/2014/nslog-macro/"/>
    <updated>2014-08-29T15:03:40+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/nslog-macro</id>
    <content type="html"><![CDATA[<p>リリース時にNSLog()が仕込まれたままの状態を防ぐ。<br/>
デバッグ時のみ、ログ出力（関数名・行番号をつけて）を行う。</p>

<!-- more -->


<h2>アプリ名-prefix.pch</h2>

<p>アプリ名-prefix.pchに以下を記載する。</p>

<figure class='code'><figcaption><span>アプリ名-prefix.pch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'><span class="cp">#define dLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define dLog(...)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ALog always displays output regardless of the DEBUG alarm</span>
</span><span class='line'><span class="cp">#define aLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用方法</h2>

<ul>
<li>dLog(@“TEST!”);　→　デバッグ時のみNSLogで出力（[関数名] [Line 25] TEST!）</li>
<li>dLog();　→　これも可（[関数名] [Line 25]）</li>
<li>aLog();　→　デバッグ・リリースに関係なく出力される。</li>
</ul>


<h2>参考</h2>

<p><a href="http://d.hatena.ne.jp/k2_k_hei/20120511/1336750473">http://d.hatena.ne.jp/k2_k_hei/20120511/1336750473</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロパティやインスタンス変数を宣言する場所]]></title>
    <link href="http://mzgk.github.io/blog/2014/property-place/"/>
    <updated>2014-08-29T14:56:41+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/property-place</id>
    <content type="html"><![CDATA[<p>記述方法は３つある。<br/>
見やすさから言えばヘッダーファイルにあるといいが、ドキュメントを読むと2. 3. が推奨されているっぽい。</p>

<ol>
<li>ヘッダーファイル</li>
<li>実装ファイル：クラスエクステンション内</li>
<li>実装ファイル：@implementation</li>
</ol>


<!-- more -->


<h2>1. ヘッダーファイル</h2>

<p>ヘッダー内に記述する。とくにグローバルでなければ非推奨。</p>

<figure class='code'><figcaption><span>sampleClass.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 実装ファイル：クラスエクステンション内</h2>

<p>実装ファイルにクラスエクステンションを作成し、そこに記述。</p>

<figure class='code'><figcaption><span>sampleClass.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">SampleClass</span> <span class="p">()</span>
</span><span class='line'><span class="c1">// クラスエクステンション内に記述する</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">メソッドの実装</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. 実装ファイル：@implementation</h2>

<p>@implementation内に{}を記述し、その中に書く。</p>

<figure class='code'><figcaption><span>sampleClass.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">SampleClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// {}を記述し、その中に記述する</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// メソッドの実装</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewでgitをインストールする]]></title>
    <link href="http://mzgk.github.io/blog/2014/install-git-by-homebrew/"/>
    <updated>2014-08-29T13:35:54+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/install-git-by-homebrew</id>
    <content type="html"><![CDATA[<p>Homebrewで最新のgitをインストールする。</p>

<!-- more -->


<h2>環境</h2>

<ul>
<li>OS X 10.9.2</li>
<li>Homebrewインストール済み</li>
<li>Macのデフォルトgit version 1.8.5.2(Apple Git-48)</li>
</ul>


<h2>gitをインストール</h2>

<figure class='code'><figcaption><span>Terminal.app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// Terminalを起動し、現在のgit versionを確認
</span><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 1.8.5.2<span class="o">(</span>Apple Git-48<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>// Homebrewで最新をインストールする
</span><span class='line'><span class="nv">$ </span>brew install git
</span><span class='line'>...
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>/usr/local/Cellar/git/1.9.2: 1324 files, 31M
</span><span class='line'>
</span><span class='line'>// インストールしたバージョンを確認
</span><span class='line'><span class="nv">$ </span>/usr/local/bin/git --version
</span><span class='line'>git version 1.9.2
</span></code></pre></td></tr></table></div></figure>


<h2>Homebrewでインストールしたgitを使用する</h2>

<p>Homebrewでインストールしたgitを使用するように設定する。<br/>
/etc/pathsの順番で、/usr/local/binが一番上にくるようにする。</p>

<figure class='code'><figcaption><span>Terminal.app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vi /etc/paths
</span><span class='line'>↓
</span><span class='line'>/usr/local/bin
</span><span class='line'>/usr/bin
</span><span class='line'>/bin
</span><span class='line'>/usr/sbin
</span><span class='line'>/sbin
</span></code></pre></td></tr></table></div></figure>


<h2>バージョンを確認する</h2>

<p>切り替わったかを確認する。</p>

<figure class='code'><figcaption><span>Terminal.app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 1.9.2
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://blog.glidenote.com/blog/2014/04/20/change-command-path-priority/">http://blog.glidenote.com/blog/2014/04/20/change-command-path-priority/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewのインストール]]></title>
    <link href="http://mzgk.github.io/blog/2014/install-homebrew/"/>
    <updated>2014-08-29T11:12:35+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/install-homebrew</id>
    <content type="html"><![CDATA[<p>Macのパッケージ管理にHomebrewを使用しているので、そのインストール方法。</p>

<!-- more -->


<h2>環境</h2>

<ul>
<li>OS X 10.9.2</li>
<li>Commandline toolインストール済み</li>
<li>インストールディレクトリの存在確認</li>
</ul>


<h2>インストールディレクトリの確認</h2>

<p>Terminal.appを起動し確認。</p>

<figure class='code'><figcaption><span>Terminal.app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// /usr/localが存在するかどうか？
</span><span class='line'><span class="nv">$ </span>ls /usr/local
</span><span class='line'>
</span><span class='line'>// 存在した
</span><span class='line'>lib
</span><span class='line'>
</span><span class='line'>// なければ作成する
</span><span class='line'><span class="nv">$ </span>sudo makdir /usr/local
</span></code></pre></td></tr></table></div></figure>


<h2>インストール</h2>

<p><a href="http://brew.sh/index_ja.html">公式サイト</a>を表示。<br/>
「Homebrewのインストール」部分に書いてあるスクリプトをコピー<br/>
Terminalを起動し、ペースト</p>

<figure class='code'><figcaption><span>Terminal.app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> このスクリプトは必ずサイトから入手すること
</span><span class='line'><span class="nv">$ </span>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</span>
</span><span class='line'>...
</span><span class='line'><span class="o">==</span>&gt; Installation successful!
</span><span class='line'>You should run <span class="sb">`</span>brew doctor<span class="err">&#39;</span> *before* you install anything.
</span><span class='line'>Now <span class="nb">type</span>: brew <span class="nb">help</span>
</span></code></pre></td></tr></table></div></figure>


<h2>インストール後の確認</h2>

<p>正しくインストールされたか確認を行う。</p>

<figure class='code'><figcaption><span>Terminal.app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'>
</span><span class='line'>// 以下のようなWarningが表示された。
</span><span class='line'>Warning: Unbrewed dylibs were found in /usr/local/lib.
</span><span class='line'>If you didn<span class="err">&#39;</span>t put them there on purpose they could cause problems when
</span><span class='line'>building Homebrew formulae, and may need to be deleted.
</span><span class='line'>
</span><span class='line'>Unexpected dylibs:
</span><span class='line'>    /usr/local/lib/libecomlodr.dylib
</span><span class='line'>
</span><span class='line'>// 余分なファイルだから削除しろとのこと。念のため、何のファイルかgoogleで検索してみると、Symantecのセキュリティソフトに絡んでいそう。
</span><span class='line'>/usr/localも既に作成されていたことを考えると削除しないで、しばらく様子をみる。
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppID・証明書の作成方法（Push通知あり）]]></title>
    <link href="http://mzgk.github.io/blog/2014/make-appid-certificate-for-pushnotification/"/>
    <updated>2014-08-28T16:42:34+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/make-appid-certificate-for-pushnotification</id>
    <content type="html"><![CDATA[<p>作成しているアプリ用に、App ID・証明書等の作成が必要になったので手順のメモ。<br/>
Push通知ありのアプリ。以下で作業が必要になる。</p>

<ul>
<li>Web（Safari &ndash;> iOS Developer Center）</li>
<li>Mac（キーチェーン・ターミナル）</li>
</ul>


<!-- more -->


<h2>App IDの作成（Web）</h2>

<ul>
<li>Safari &ndash;> iOS Developer Centerにアクセス</li>
<li>Certificates, Identifiers &amp; Profiles</li>
<li>iOS Apps</li>
<li>Identifiers &ndash;> App IDs</li>
<li>＋ボタンで作成開始</li>
<li>App ID Description

<ul>
<li>Name: 名前を入れる（判別しやすいように）</li>
</ul>
</li>
<li>App ID Prefix

<ul>
<li>Value: 自動生成されている（入力不可）</li>
</ul>
</li>
<li>App ID Suffix

<ul>
<li>Explicit App ID</li>
<li>Bundle ID: jp.co.ast-net.アプリ名（小文字）</li>
</ul>
</li>
<li>App Services

<ul>
<li>使用するものにチェックを入れる（今回はPush Notifications）</li>
</ul>
</li>
</ul>


<h2>証明書の作成（Mac）</h2>

<ul>
<li>キーチェーンアクセス.appを起動</li>
<li>メニューから、キーチェーンアクセス &ndash;> 証明書アシスタント &ndash;> 認証局に証明書を要求</li>
<li>入力欄

<ul>
<li>メールアドレス：入力</li>
<li>通称：入力</li>
<li>CAのメールアドレス：未入力</li>
</ul>
</li>
<li>チェック欄

<ul>
<li>ディスクに保存</li>
<li>鍵ペア情報を指定</li>
</ul>
</li>
<li>作成される「CertificateSigningRequest.certSigningRequest」（CSR）を任意の場所に保存</li>
<li>鍵サイズ：2048</li>
<li>アルゴリズム：RSA</li>
</ul>


<h2>App IDと証明書の設定（Web）</h2>

<ul>
<li>ここからは開発用（Development）と製品用（Distribution）の２回作業が必要</li>
<li>Safari &ndash;> iOS Developer Centerにアクセス</li>
<li>Certificates, Identifiers &amp; Profiles</li>
<li>iOS Apps</li>
<li>Identifiers &ndash;> App IDs</li>
<li>先ほど作成したApp IDを選択 &ndash;> Edit（Push Notificationsが黄色になっている）</li>
<li>Push Notificationsの「Development SSL Certificate &ndash;> Create Certificate&hellip;」をクリック</li>
<li>Continueをクリック</li>
<li>Chose File&hellip; で、作成した証明書（CSR）を選択</li>
<li>Generateをクリック</li>
<li>作成されたら、Downloadをクリックしダウンロードする</li>
<li>aps_development.cer（aps_production.cer）がダウンロードされる</li>
<li>Certificates &ndash;> Allには設定した分が増えている（Name: Bundle ID）</li>
</ul>


<h2>証明書の書き出し（Mac）</h2>

<ul>
<li>ダウンロードしたファイル（aps_development.cer）をダブルクリックして、キーチェーンに登録する</li>
<li>キーチェーン.appを起動</li>
<li>Apple Development IOS Push Services: Bundle IDが登録されているので選択し、右クリック</li>
<li>&ldquo;Apple Development IOS Push Services: Bundle ID&#8221;を書き出すをクリック</li>
<li>名前をつけて、任意の場所に保存。フォーマット：個人情報交換（.p12）</li>
<li>パスワードを作成</li>
</ul>


<h2>証明書の変換（Mac）</h2>

<ul>
<li>ターミナルを起動</li>
<li>ファイルのあるディレクトリに移動</li>
<li>コマンドを入力し、パスワードを入力</li>
<li>終了すると、証明書の名前.pemが作成される</li>
<li>作成された.pemファイルを通知処理を行うサーバーに置いておく</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// 入力
</span><span class='line'><span class="nv">$ </span>openssl pkcs12 -in 証明書の名前.p12 -out 証明書の名前（p12と別でも可）.pem -nodes -clcerts
</span><span class='line'>// 聞かれる
</span><span class='line'>Enter Import Password: 証明書の書き出しで作成したパスワード
</span><span class='line'>// 完了
</span><span class='line'>MAC Verified OK
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitignoreをあとから適用する]]></title>
    <link href="http://mzgk.github.io/blog/2014/gitignore-apply-after-add/"/>
    <updated>2014-08-28T10:44:36+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/gitignore-apply-after-add</id>
    <content type="html"><![CDATA[<p>.gitignoreファイルはgit管理対象外とするディレクトリ・ファイルを登録するファイルだが、すでに管理対象として登録されたものに対しては無視される。<br/>
すでに管理対象となっているものを、後から.gitginoreに登録し適用させる方法。</p>

<h2>例：draftsディレクトリを対象外としたい</h2>

<p>下書きディレクトリとして <code>draftsディレクトリ</code> を管理対象としていたが、DropBoxで運用したいのでGit管理からは外したい。</p>

<h3>.gitignoreに追記</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ディレクトリの最後に「/（スラッシュ）」をつける
</span><span class='line'>drafts/</span></code></pre></td></tr></table></div></figure>


<h3>ターミナル</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// --cachedをつけることで、ファイル自体はローカルから削除しない
</span><span class='line'>$ git rm --cached -r drafts/
</span><span class='line'>
</span><span class='line'>// ちなみにファイルの場合は以下
</span><span class='line'>$ git rm --cached A.txt
</span><span class='line'>
</span><span class='line'>// ローカルからファイルも削除する場合は以下
</span><span class='line'>$ git rm A.txt</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git コミットのメッセージ書き方]]></title>
    <link href="http://mzgk.github.io/blog/2014/git-commit-message/"/>
    <updated>2014-08-28T09:51:50+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/git-commit-message</id>
    <content type="html"><![CDATA[<p>Gitではコミットメッセージの形式に関して制約はないが、標準的な形式は以下となる。</p>

<ul>
<li>１行目にコミットの全体的説明を５０字以内で記述</li>
<li>２行目は空行</li>
<li>３行目以降に変更内容の詳細を記述</li>
<li>現在形で記述</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Change the message displayed by hello.py
</span><span class='line'>
</span><span class='line'>- Update the sayHello() function to output the user's name
</span><span class='line'>- Change the sayGoodbye() function to a friendlier message</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="https://www.atlassian.com/ja/git/tutorial/git-basics#!commit">https://www.atlassian.com/ja/git/tutorial/git-basics#!commit</a></p>
]]></content>
  </entry>
  
</feed>

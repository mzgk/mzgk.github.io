<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jubilee]]></title>
  <link href="http://mzgk.github.io/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-05T14:39:26+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[作りの格言]]></title>
    <link href="http://mzgk.github.io/blog/2014/maxim/"/>
    <updated>2014-08-05T14:31:43+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/maxim</id>
    <content type="html"><![CDATA[<blockquote><p>Do not amaze everyone, But rescure yourself.<br/>
多くの人を感動させようとする前に、まず自分自身を救え。</p>

<p>Done is better than perfect.<br/>
完璧を目指すより、まず終わらせろ。</p>

<p>Eat your own dogfood, and Serve your best dogfood.<br/>
自分自身がユーザーであれ、そして良いと思ったものを誇りをもって出せ。</p>

<p>There is worth, there is a way.<br/>
ユーザーが対価を払う方法は必ずある、だから価値のあるものを作れ。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[対象のビューがサブビューかどうか判断する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/confirm-subview/"/>
    <updated>2014-08-05T14:26:28+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/confirm-subview</id>
    <content type="html"><![CDATA[<p>対象のビューがサブビューかどうか（ビューに存在しているか？）を判断する方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// メモリから破棄されないように&quot;strong&quot;を指定</span>
</span><span class='line'><span class="err">@</span><span class="n">preoperty</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomatic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">myLabel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">removeAllLabel:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">_mylabel</span> <span class="nl">isDescendantOfView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ビューから取り除く</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_myLabel</span> <span class="n">removeFromSuperView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ビューに追加する</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSuperView:</span><span class="n">_mylabel</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>スーパービューを調べる</h2>

<p><code>_myLabel.superView</code> でも、_myLabelにスーパービューがあるかどうか調べられる。</p>

<h2>取り除く≒非表示</h2>

<p><code>_myLabel.hidden = YES;</code> で、取り除くことなく非表示化できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeで例外が発生した場所を特定する]]></title>
    <link href="http://mzgk.github.io/blog/2014/exception-breakpoint/"/>
    <updated>2014-08-05T14:00:51+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/exception-breakpoint</id>
    <content type="html"><![CDATA[<p>Xcodeでのデバック実行中に例外が発生した場合、mainで終了し、どこで例外が発生したのかがわからない場合がある。<br/>
そんな時に有効な設定。</p>

<p>ナビゲーションエリア　→　ブレークポイントナビゲーター（⌘+7）→　左下の＋ボタン　→　Add Exception Breakpoint&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[論理演算子を使って状態を逆転させる]]></title>
    <link href="http://mzgk.github.io/blog/2014/logicaloperator/"/>
    <updated>2014-08-05T13:13:59+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/logicaloperator</id>
    <content type="html"><![CDATA[<p>スイッチのON／OFFなどで、イメージの表示／非表示を制御する際の方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">switchChange:</span><span class="p">(</span><span class="n">UISwitch</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// スイッチのON/OFFと逆の設定をする方法</span>
</span><span class='line'>    <span class="n">_photo</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="n">sender</span><span class="p">.</span><span class="n">on</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 状態の逆転をさせる方法</span>
</span><span class='line'>    <span class="n">_photo</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="n">_photo</span><span class="p">.</span><span class="n">hidden</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第５回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-5/"/>
    <updated>2014-02-22T12:44:01+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-5</id>
    <content type="html"><![CDATA[<p>Bitbucketで管理しているOctopressブログ環境を取得し、ローカルに再構築する。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）　&lt;&ndash; <strong>いまここ</strong></li>
</ol>


<!-- more -->


<h2>手順</h2>

<ol>
<li>Octopressブログ環境の取得（Bitbucketから）</li>
<li>bundlerのインストール</li>
<li>GitHubとOctopressを繋げる</li>
<li>GitHubリポジトリ（mzgk.github.io）の削除／再作成（他に解決法はあると思う）</li>
<li>記事作成 &ndash;> デプロイ</li>
<li>Octopressブログ環境を管理（Bitbucket）</li>
</ol>


<h2>1. Octopressブログ環境の取得</h2>

<p>BitbucketのリポジトリでOctopressローカル環境を管理していたので、$ git clone でローカルにファイルを取得する。<br/>
Terminalを起動し、ディレクトリを作成したい場所まで移動。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@bitbucket.org:mzgk/mzgk.github.io.git
</span><span class='line'>...
</span><span class='line'>Checking connectivity... done</span></code></pre></td></tr></table></div></figure>


<p>これでローカルにmzgk.github.ioディレクトリが作成され、ブログ環境一式が取得できる。</p>

<h2>2. bundlerインストール</h2>

<p>予想していなかったが、bundlerのインストールが必要だった。<br/>
テーマは既にあるので <code>$ rake install</code> は不要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Octopress環境のディレクトリに移動して
</span><span class='line'>$ gem install bundler
</span><span class='line'>...
</span><span class='line'>Installing RDoc documentation for bundler-1.5.3...
</span><span class='line'>$ rbenv rehash
</span><span class='line'>$ bundle install
</span><span class='line'>...
</span><span class='line'>Your bundle is complete!</span></code></pre></td></tr></table></div></figure>


<h2>3. GitHubとOctopressを繋げる</h2>

<p>これも予想していなかったが、ローカルとGitHub Pagesの接続が必要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Octopress環境のディレクトリに移動して
</span><span class='line'>$ rake setup_github_pages
</span><span class='line'>...
</span><span class='line'>Repository url:ここにGitHubリポジトリの「SSH clone URL」をペースト
</span><span class='line'>...
</span><span class='line'>## Now you can deploy to git@...</span></code></pre></td></tr></table></div></figure>


<h2>4. GitHubリポジトリ（mzgk.github.io）の削除／再作成（※※解決法あり）</h2>

<p>なぜか、<code>$rake deploy</code> でエラーが発生して失敗する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>To git@github.com:mzgk/mzgk.github.io.git
</span><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class='line'>error: failed to push some refs to 'git@github.com:mzgk/mzgk.github.io.git'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
</span><span class='line'>hint: before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure>


<p>よくわからず…（-fの方法は？）<br/>
コンフリクトしているみたいなので、デプロイ先のGitHubのリポジトリを消してみる。<br/>
再度、$ rake deployでうまくいく。</p>

<p>※※<br/>
Rakefileを以下のように変更してdeployすると大丈夫だとのこと（今回は試してはいない）。<br/>
L264行目あたり</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "git push origin #{deploy_branch}"
</span><span class='line'>↓
</span><span class='line'>system "git push origin +#{deploy_branch}"</span></code></pre></td></tr></table></div></figure>


<h2>5. 記事作成->デプロイ</h2>

<p>あとはいつも通りの流れ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ポストファイル作成（source/_postsにyyyy-mm-dd-title.markdown）
</span><span class='line'>$ rake new_post["title"]
</span><span class='line'>// 記事を書いて
</span><span class='line'>// 生成
</span><span class='line'>$ rake generate
</span><span class='line'>// プレビュー（localhost:4000）
</span><span class='line'>$ rake preview
</span><span class='line'>// デプロイ
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>6. Octopressブログ環境を管理（Bitbucket）</h2>

<p>ローカル環境をリモートリポジトリBitbucketにPUSHして管理。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "コメント"
</span><span class='line'>// リモートリポジトリを追加
</span><span class='line'>$ git remote add bitbucket git@bitbucket.org:mzgk/mzgk.github.io.git
</span><span class='line'>// リモートリポジトリにPush（以後は$ git pushのみで可）
</span><span class='line'>$ git push -u bitbucket source</span></code></pre></td></tr></table></div></figure>


<h2>以上</h2>

<p>以上で、無事に終了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第４回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-4/"/>
    <updated>2014-02-22T12:38:07+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-4</id>
    <content type="html"><![CDATA[<p>Macも新しくなったので、SSH鍵の設定をあらためて実施。<br/>
GitHub, Biubucketに対して行う。<br/>
別々の鍵ファイルを用意した方がいいのかもしれないが、今回は一つのファイルでやってみる。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）　&lt;&ndash; <strong>いまここ</strong></li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>方針</h2>

<ul>
<li>一つの鍵ファイルをGitHubとBitbucketに使用する</li>
<li>ファイル名（-f）をつける（誤って上書きしないように）<br/>
id_rsa.jd-repository</li>
<li>コメント（-C）は、ユーザ名@マシン名<br/>
JohnDoe@jd-mbp15</li>
<li>パスフレーズなし</li>
</ul>


<h2>鍵の作成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/.ssh
</span><span class='line'>No such file or directory
</span><span class='line'>$ mkdir .ssh
</span><span class='line'>$ cd .ssh
</span><span class='line'>$ ssh-keygen -t rsa -C "JohnDoe@jd-mbp15"
</span><span class='line'>Enter file in witch to save the key: id_rsa.jd-repository &lt;-ここでファイル名をつける
</span><span class='line'>...
</span><span class='line'>+--[ RSA 2048]----+
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>ssh-keygenコマンドのオプションの内容は以下。<br/>
-t：鍵の種類<br/>
-b：ビット数（デフォルト2048なので指定不要）<br/>
-C：コメント</p>

<h2>ファイル生成確認</h2>

<p>生成されたかを確認する。<br/>
id_rsa.repository：秘密鍵<br/>
id_rsa.repository.pub：公開鍵</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -la
</span><span class='line'>-rw-------   1 JohnDoe  staff  1675  2 16 17:03 id_rsa.jd-repository
</span><span class='line'>-rw-r--r--   1 JohnDoe  staff   396  2 16 17:03 id_rsa.jd-repository.pub</span></code></pre></td></tr></table></div></figure>


<h2>ファイルのパーミッションを変更</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 600 id_rsa.jd-repository</span></code></pre></td></tr></table></div></figure>


<p>必要であれば行うが、既に600になっている。</p>

<h2>公開鍵の内容をコピー</h2>

<p>GitHub, Bitbucketに登録する公開鍵の内容をクリップボードにコピーする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pbcopy &lt; ~/.ssh/id_rsa.jd-repository.pub</span></code></pre></td></tr></table></div></figure>


<h2>GitHubに登録</h2>

<p>GitHubにログイン &ndash;> AccountSettings &ndash;> SSH Keys</p>

<ul>
<li>Title：わかりやすいように。jd-mbp15</li>
<li>Key：pbcopyでコピーした内容をペースト（Cmd+v）</li>
<li>Add Key：最後にここを押下</li>
</ul>


<h2>Bitbucketに登録</h2>

<p>Bitbucketにログイン &ndash;> アカウントの管理 &ndash;> SSH キー</p>

<ul>
<li>鍵を追加：押下（モーダルウィンドウが表示される）</li>
<li>Label：わかりやすいように。jd-mbp15</li>
<li>Key：pbcopyでコピーした内容をペースト（Cmd+v）</li>
<li>鍵を追加：最後にここを押下</li>
</ul>


<h2>コンフィグファイル（local）にSSHホスト情報を登録</h2>

<p>Macにある <code>~/.ssh/config</code> にHOST情報を追加する。<br/>
ここに登録しておくと、Terminalからのsshコマンドを簡略化できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -l git -i ~/.ssh/id_rsa.jd-repository github.com
</span><span class='line'>↓
</span><span class='line'>$ ssh github.com</span></code></pre></td></tr></table></div></figure>


<p>登録する内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host github.com
</span><span class='line'>  HostName github.com
</span><span class='line'>  User git
</span><span class='line'>  Port 22
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa.jd-repository
</span><span class='line'>  IdentitiesOnly yes
</span><span class='line'>
</span><span class='line'>Host bitbucket.org
</span><span class='line'>  HostName bitbucket.org
</span><span class='line'>  User git
</span><span class='line'>  Port 22
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa.jd-repository
</span><span class='line'>  IdentitiesOnly yes</span></code></pre></td></tr></table></div></figure>


<p>設定の意味については以下</p>

<ul>
<li>Host：ホスト名</li>
<li>HostName：ホストのアドレス or IP</li>
<li>User：ログインユーザー</li>
<li>Port：使用ポート（デフォルト：22）</li>
<li>IdentityFile：利用する秘密鍵のファイル名</li>
<li>IdentitiesOnly：ファイルに格納された秘密鍵のみを使用</li>
</ul>


<h2>GitHubのリポジトリにアクセスする際は</h2>

<p>GitHubのリポジトリにアクセスする際は注意が必要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git@[HostName]:[Account name]/[Repository name].git
</span><span class='line'>// ここの[HostName]にはConfigに設定したHostNameを指定する</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第３回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-3/"/>
    <updated>2014-02-22T12:27:31+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-3</id>
    <content type="html"><![CDATA[<p>前回のrbenvインストールでRubyインストールの準備が整ったので、Ruby1.9.3-p484をインストールする。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>Rubyのインストールバージョンの確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv install -l
</span><span class='line'>...
</span><span class='line'>  1.9.3-p429
</span><span class='line'>  1.9.3-p448
</span><span class='line'>  1.9.3-p484
</span><span class='line'>  1.9.3-preview1
</span><span class='line'>  1.9.3-rc1</span></code></pre></td></tr></table></div></figure>


<p>今回は、1.9.3-p484をインストールする。</p>

<h2>Rubyのインストール</h2>

<p>単純に、<code>$ rbenv install 1.9.3-p484</code> でもいいが、readlineとopensslを有効にしてRubyをインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ CONFIGURE_OPTS="--with-readline-dir=$(brew --prefix readline) --with-openssl-dir=$(brew --prefix openssl)" rbenv install 1.9.3-p484
</span><span class='line'>...
</span><span class='line'>Downloading yaml-0.1.5.tar.gz...　＞ちょっと時間が掛かる
</span><span class='line'>-&gt; http://dqw8nmjcqpjn7.cloudfront.net/24f6093c1e840ca5df2eb09291a1dbf1
</span><span class='line'>Installing yaml-0.1.5...
</span><span class='line'>Installed yaml-0.1.5 to /Users/JohnDoe/.rbenv/versions/1.9.3-p484
</span><span class='line'>
</span><span class='line'>Downloading ruby-1.9.3-p484.tar.gz...
</span><span class='line'>-&gt; http://dqw8nmjcqpjn7.cloudfront.net/8ac0dee72fe12d75c8b2d0ef5d0c2968
</span><span class='line'>Installing ruby-1.9.3-p484...
</span><span class='line'>Installed ruby-1.9.3-p484 to /Users/JohnDoe/.rbenv/versions/1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<h2>使用するバージョンの切り替え</h2>

<p>1: まずは、現在のRubyバージョンを確認する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]</span></code></pre></td></tr></table></div></figure>


<p>2: どのバージョンを使う設定になっているかを調べる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv version
</span><span class='line'>system (set by /Users/JohnDoe/.rbenv/version)</span></code></pre></td></tr></table></div></figure>


<p>system標準を使用するようになっているのがわかる。</p>

<p>3: 利用可能なバージョンがあるか調べる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv versions
</span><span class='line'>* system (set by /Users/JohnDoe/.rbenv/version)
</span><span class='line'>  1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<p>先ほどインストールした1.9.3-p484の使用も可能。</p>

<p>4: 利用するバージョンを切り替える</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv global 1.9.3-p484
</span><span class='line'>$ rbenv rehash</span></code></pre></td></tr></table></div></figure>


<p>5: 切り替わったかどうか、バージョンを調べる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.2]
</span><span class='line'>$ rbenv version
</span><span class='line'>1.9.3-p484 (set by /Users/JohnDoe/.rbenv/version)</span></code></pre></td></tr></table></div></figure>


<p>1.9.3-p484を使用するようになっていることが確認できる。</p>

<h2>ディレクトリ単位での切り替え</h2>

<p><strong>ここはBitbucketからのclone後に設定。</strong><br/>
1.9.3-p484を使いたいのはOctopressを使うディレクトリでの作業のみだと考えると、そのディレクトリにのみ1.9.3を適用することはできるのだろうか？<br/>
rbenvにディレクトリ単位の切り替え機能はあるのだろうか？<br/>
googleで調べてみたところ、可能みたいな。</p>

<ul>
<li>ユーザ毎に使用するRubyのバージョンを変更できる</li>
<li>プロジェクト毎にRubyのバージョンを指定できる<br/>
.rbenv-versionファイルを読み取って、特定ディレクトリ以下のRubyバージョンを指定できる。</li>
<li>環境変数によってRubyのバージョンを指摘できる<br/>
RBENV_VERSIONを指定しておくと、その環境変数が有効な範囲でだけRubyバージョンを指定できる。</li>
</ul>


<p>２つ目のプロジェクト毎に指定が理想なので、以下を行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Rubyのバージョン指定をしたいディレクトリに移動
</span><span class='line'>$ cd 指定ディレクトリ
</span><span class='line'>$ rbenv local 1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<p>もしくは対象のディレクトリに直接.rbenv-versionというファイルを作成。<br/>
中身は <code>1.9.3-p484</code> と記述。</p>

<p>確認：まずはホームディレクトリ &ndash;> system(2.0.0)の使用になっている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]
</span><span class='line'>$ rbenv version
</span><span class='line'>system (set by /Users/JohnDoe/.rbenv/version)
</span><span class='line'>$ rbenv versions
</span><span class='line'>* system (set by /Users/JohnDoe/.rbenv/version)
</span><span class='line'>  1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<p>確認：対象ディレクトリ &ndash;> 1.9.3の使用になっている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.2]
</span><span class='line'>$ rbenv version
</span><span class='line'>1.9.3-p484 (set by /Users/JohnDoe/mzgk.github.io/.ruby-version)
</span><span class='line'>$ rbenv versions
</span><span class='line'>  system
</span><span class='line'>* 1.9.3-p484 (set by /Users/JohnDoe/mzgk.github.io/.ruby-version)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第２回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-2/"/>
    <updated>2014-02-22T12:18:26+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-2</id>
    <content type="html"><![CDATA[<p>前回はHomebrewのインストールまでだったので、続きから。<br/>
Rubyのバージョン管理を行うrbenvやその他必要モジュールをインストール。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>readline</h2>

<p>Rubyが使用するライブラリで、コマンドラインの１行入力をサポートするライブラリ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install readline
</span><span class='line'>...
</span><span class='line'>LDFLAGS:  -L/usr/local/opt/readline/lib
</span><span class='line'>CPPFLAGS: -I/usr/local/opt/readline/include
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/readline/6.2.4: 31 files, 1.6M</span></code></pre></td></tr></table></div></figure>


<h2>openssl</h2>

<p>Rubyが使用するライブラリ。<br/>
SSL（Secure Socket Layer）は、ネットワーク通信を暗号化するライブラリで、OpenSSLはそのオープンソースの実装。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install openssl
</span><span class='line'>...
</span><span class='line'>    LDFLAGS:  -L/usr/local/opt/openssl/lib
</span><span class='line'>    CPPFLAGS: -I/usr/local/opt/openssl/include
</span><span class='line'>
</span><span class='line'>==&gt; security find-certificate -a -p /Library/Keychains/System.keychain &gt; '/usr/local/etc/openssl/osx_cert.pem.tmp'
</span><span class='line'>==&gt; security find-certificate -a -p /System/Library/Keychains/SystemRootCertificates.keychain &gt;&gt; '/usr/local/etc/openssl/osx_cert.
</span><span class='line'>==&gt; mv -f /usr/local/etc/openssl/osx_cert.pem.tmp /usr/local/etc/openssl/osx_cert.pem
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/openssl/1.0.1f: 429 files, 15M</span></code></pre></td></tr></table></div></figure>


<h2>rbenv</h2>

<p>Rubyのバージョン切り替えを行えるパッケージ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install rbenv
</span><span class='line'>...
</span><span class='line'>==&gt; Caveats
</span><span class='line'>To use Homebrew's directories rather than ~/.rbenv add to your profile:
</span><span class='line'>  export RBENV_ROOT=/usr/local/var/rbenv
</span><span class='line'>
</span><span class='line'>To enable shims and autocompletion add to your profile:
</span><span class='line'>  if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/rbenv/0.4.0: 31 files, 152K, built in 2 seconds</span></code></pre></td></tr></table></div></figure>


<h2>.bash_profile</h2>

<p>rbenvをインストール時に表示されたスクリプトを.bash_profileに追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.bash_profile
</span><span class='line'>...
</span><span class='line'>// rbenv(to enable shims and autocompletion)
</span><span class='line'>if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi
</span><span class='line'>...
</span><span class='line'>$ source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<h2>ruby-build</h2>

<p>rbenvを使用してRubyをインストールするためのパッケージ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install ruby-build
</span><span class='line'>...
</span><span class='line'>==&gt; Installing ruby-build
</span><span class='line'>==&gt; Downloading https://github.com/sstephenson/ruby-build/archive/v20140214.tar.gz
</span><span class='line'>######################################################################## 100.0%
</span><span class='line'>==&gt; ./install.sh
</span><span class='line'>🍺  /usr/local/Cellar/ruby-build/20140214: 108 files, 472K, built in 2 seconds</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第１回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-1/"/>
    <updated>2014-02-22T11:27:04+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-1</id>
    <content type="html"><![CDATA[<p>Macを新しくしたので、Octopressブログ環境を再構築する必要がでてきた。<br/>
前のローカル環境はBitbucketで管理しているので $ git clone すればいいが、Rubyその他もろもろのセットアップは必要。<br/>
前のMacではRubyをさわったりで、前準備ができていた状態での構築だったが、今回はゼロからの構築。<br/>
まずは、パッケージ管理のHomebrewをインストールまでが目標。</p>

<ol>
<li>Homebrewのインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>現在の環境</h2>

<ul>
<li>OS X 10.9.1 (Mavericks)</li>
<li>Ruby 2.0.0-p247</li>
<li>git 1.8.3.4 (Apple Git-47)</li>
<li>XCode5</li>
</ul>


<h2>まずは</h2>

<p>Octopressを使いたいので、Ruby1.9.3が必要。<br/>
だけど、今は2.0.0がインストールされている。<br/>
なので、Rubyのインストールが必要。<br/>
それには、Rubyのバージョン管理をしてくれるrbenvが必要。<br/>
じゃあまずは、rbenvをインストールするためにパッケージ管理のHomebrewをインストールしないと。</p>

<h2>Homebrew</h2>

<p>※XCode5はインストール済み（＝Command Line Toolはインストール済み）<br/>
→ここは <strong>大きな間違い。</strong> Xcodeインストールしただけではダメ。自分で別途インストールする必要あり。</p>

<h3>インストールディレクトリの確認</h3>

<ul>
<li><code>$ ls /usr/local</code></li>
<li>無ければ作成</li>
<li><code>$ sudo mkdir /usr/local</code></li>
<li>sudoなしで実行したら、<code>Permission denied</code> が表示される</li>
</ul>


<h3>Homebrewのインストール</h3>

<ul>
<li>まずは<a href="http://brew.sh/index_ja.html">公式サイト</a>を確認</li>
<li>サイトからインストールコマンドをコピーし、Terminalにペーストし実行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Command Line Toolが入っていない…？</li>
<li>Xcodeをインストールしただけで、Command Line Toolはまだインストールされていなかった…</li>
<li>ダイアログが表示されるので、インストールを選択</li>
<li>Command Line Toolがインストールされ、Homebrewのインストールが進んでいく</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; Installation successful!
</span><span class='line'>You should run 'brew doctor' *before* you install anything.
</span><span class='line'>
</span><span class='line'>// brew doctorで確認
</span><span class='line'>$ brew doctor
</span><span class='line'>Your system is ready to brew.
</span><span class='line'>
</span><span class='line'>// バージョンを見る
</span><span class='line'>$ brew --version
</span><span class='line'>0.9.5</span></code></pre></td></tr></table></div></figure>


<h2>パスを通す</h2>

<ul>
<li>ホームディレクトリ直下に.bash_profileと.bashrcを作成する（ない場合）</li>
<li>.bash_profileに以下を記述</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch ~/.bash_profile .bashrc &lt;- 作成
</span><span class='line'>$ vim ~/.bash_profile &lt;- vim起動
</span><span class='line'>...
</span><span class='line'># Terminal起動時は.bash_profile→.bashrcが、シェル切り替え時は.bashrcが単体で読込まれる
</span><span class='line'># なので、以後の設定は.bashrcに記述するとどのような場合でも同じパス設定が読込まれる。
</span><span class='line'>if [-f ~/.bashrc]; then
</span><span class='line'>  . ~/.bashrc
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<ul>
<li>.bashrcに以下を記述</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.bashrc
</span><span class='line'>...
</span><span class='line'># Homebrew setting
</span><span class='line'># Homebrewでインストールされたモジュールは以下に格納されるので、
</span><span class='line'># TerminalでHomebrewのコマンドを使用できるようにパスを通しておく
</span><span class='line'>PATH=/usr/local/bin:/usr/local/sbin:$PATH
</span><span class='line'>export PATH</span></code></pre></td></tr></table></div></figure>


<ul>
<li>確認<br/>
/usr/local/binが２つでる…。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $PATH
</span><span class='line'>/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin</span></code></pre></td></tr></table></div></figure>


<ul>
<li>問題発生

<ul>
<li>直そうと思って、.bashrcの記述を変更</li>
<li>そしたら記述を間違ったらしく.bashrcエラーでTerminalからコマンドを受け付けなくなる…</li>
<li>$ vi も $ vim も$ rmも受け付けない。困った…</li>
<li>隠しファイルを表示させようにもコマンドが打てない…</li>
<li>coda2で『ファイルを開く＞下のオプションボタン＞隠しファイルを表示』にチェック</li>
<li>再度開くと隠しファイルが表示されるので、.bashrcを選択して内容を修正</li>
<li>Terminalを再起動させて回復</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでカット＆ペーストをする]]></title>
    <link href="http://mzgk.github.io/blog/2014/finder-cut-and-paste/"/>
    <updated>2014-02-19T21:29:35+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/finder-cut-and-paste</id>
    <content type="html"><![CDATA[<p>Macではカット＆ペーストはできないと思い込んでいたが、実は標準機能で可能だったのでメモ。<br/>
カット＆ペーストのためだけに、『XtraFinder』などのアプリをインストールする必要もなかった…<br/>
Windowsに慣れていると、ついついMacでもカット＆ペーストを <code>Cmd+x Cmd+v</code> としてしまうが、Macではちょっと勝手が違う。</p>

<!-- more -->


<h2>正確にはコピー＆ムーブ</h2>

<p>ショートカットキーは以下。<br/>
<code>Cmd + c</code> でコピー<br/>
<code>Cmd + Opt + v</code> でムーブ<br/>
これで、カット＆ペーストが可能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressでGoogle Fontsを使う]]></title>
    <link href="http://mzgk.github.io/blog/2014/octopress-googlefont/"/>
    <updated>2014-02-18T22:13:54+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/octopress-googlefont</id>
    <content type="html"><![CDATA[<p>OctopressでGoogle Fontsを使えるようにして、気に入ったフォントで表示したい。<br/>
そして、ブラウザ間でフォントを統一したい。<br/>
その設定方法を調べたのでメモ。</p>

<!-- more -->


<h2>Google Font</h2>

<p>まず、 <a href="http://www.google.com/fonts">Google Font</a> にアクセスする。</p>

<p>使いたいフォントを選ぶ。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_1.png" alt="フォントを選ぶ" /></p>

<p>複数選択し、比較も可能。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_2.png" alt="フォントを比較" /></p>

<p>使うフォントの表示速度を確認。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_3.png" alt="フォント確認" /></p>

<p>埋め込むコードをコピー。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_4.png" alt="コードを取得" /></p>

<h2>Octopressに設定</h2>

<p>Octopressの以下のファイルに取得したコードをペーストする。<br/>
<strong>source/_includes/custom/head.html</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 取得したコード
</span><span class='line'>&lt;link href="http://mzgk.github.io//fonts.googleapis.com/css?family=Monda:400,700" rel="stylesheet" type="text/css"&gt;</span></code></pre></td></tr></table></div></figure>


<h2>CSSに使用</h2>

<p>フォントを定義するSCSSファイルに定義する。<br/>
<strong>sass/custom/_fonts.scss</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Mondaを追加
</span><span class='line'>$sans: "Monda", "HiraMaruPro-W4", Arial, sans-serif;</span></code></pre></td></tr></table></div></figure>


<h2>Generate &amp; Deploy</h2>

<p>あとは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>...
</span><span class='line'>$ rake deploy
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkdownPreviewで独自CSSを設定する]]></title>
    <link href="http://mzgk.github.io/blog/2014/sublimetext-markdownpreview-css-hack/"/>
    <updated>2014-02-02T10:21:24+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/sublimetext-markdownpreview-css-hack</id>
    <content type="html"><![CDATA[<p>Sublime Text3の便利なPackage、Markdownで記述したファイルをPreviewできる『Markdown Preview』。<br/>
GitHub flavoredも適用できるが、独自CSSをあてたかった。<br/>
どこで設定できるのか探してたところ・・・</p>

<!-- more -->


<h2>Package Settingsがある</h2>

<p>Preferencesには <strong>Package Settings</strong> がある。<br/>
まずは、Markdown PreviewのDefaultの内容を覗いて見ると、それらしき個所が・・・。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>  Sets the default css file to embed in the HTML
</span><span class='line'>
</span><span class='line'>  default - Use the builtin CSS or github CSS, depending on parser config (markdown.css or github.css)
</span><span class='line'>  other - Set an absolute path or url to any css file
</span><span class='line'>*/
</span><span class='line'>"css": "default",</span></code></pre></td></tr></table></div></figure>


<p>なるほど。<br/>
<code>other - Set an absolute path or url to any css file</code> の部分が鍵で、絶対パスで指定しろと。</p>

<h2>User用のSetting</h2>

<p><strong>Preferences > Package Settings > Markdown Preview > Settings-User</strong><br/>
で表示されたファイルに以下を記述し保存。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "css": "CSSファイルの絶対パス",
</span><span class='line'>}
</span><span class='line'>※Windowsの場合、パスの\は/に置き換えて絶対パスを書く。</span></code></pre></td></tr></table></div></figure>


<p>注意するのは、Windowsの場合に <strong>『パスの\（&yen;）は/に置き換えて』</strong> 記述すること。</p>

<h2>自分のやった手順</h2>

<p>自分は、フォント周りを変えたかったので、<br/>
1. chromeで表示されたPreview結果を <strong>右クリック > 要素を検証</strong> で開発ツールを表示<br/>
2. <code>&lt;style&gt;...&lt;/style&gt;</code> のCSS定義をコピー<br/>
3. 自分のCSSファイルに貼付ける<br/>
4. 変更・追加を加える<br/>
5. 任意の場所に保存<br/>
6. その絶対パスを指定<br/>
これで、独自のCSSでプレビューできる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのフォントや文字間・行間を変更する]]></title>
    <link href="http://mzgk.github.io/blog/2014/octopress-font-setting/"/>
    <updated>2014-01-26T16:11:50+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/octopress-font-setting</id>
    <content type="html"><![CDATA[<p>Octopressでフォントやフォントサイズ・文字間・行間の変更をする方法。<br/>
サイドバーにAbout Meを表示させる方法。</p>

<p>デフォルトのフォント周りの設定はちょっとタイトルの文字が大きすぎたり、文章の行間がつまりすぎたりしていると感じていたので、変更してみた。<br/>
ちなみにサイドバー用の小さいAbout Meはデフォルトで用意されている。</p>

<!-- more -->


<h2>フォント</h2>

<p><code>/sass/custom/_fonts.scss</code> にフォントを定義する。<br/>
今時点で自分が定義している内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sans: "TrebuchetMS", "HiraMaruPro-W4", Arial, sans-serif;
</span><span class='line'>$serif: "Courier-Oblique", "HiraMaruPro-W4", serif;
</span><span class='line'>$mono: "Consolas", monospace;
</span><span class='line'>$heading-font-family: "TrebuchetMS", "HiraMaruPro-W4", Arial, sans-serif;</span></code></pre></td></tr></table></div></figure>


<h2>フォントサイズ・文字間・行間</h2>

<p><code>/sass/custom/_styles.scss</code> に定義する。<br/>
こんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>h1.entry-title a {
</span><span class='line'>  font-size: 0.8em;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>body {
</span><span class='line'>  letter-spacing: 3px;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>p {
</span><span class='line'>  line-height: 1.8;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>サイドバーにAbout meを表示させる</h2>

<p><code>_config.yml</code> を変更する。</p>

<p>53行目あたりにパス <code>custom/asides/about.html,</code> を追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [custom/asides/about.html,asides/recent_posts.html, ...</span></code></pre></td></tr></table></div></figure>


<p>About Meの内容を作成するには、この<code>custom/asides/about.html</code> をいじる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DayOne.appで自分の好きなフォントとレイアウトを使用する]]></title>
    <link href="http://mzgk.github.io/blog/2014/dayone-font-setting/"/>
    <updated>2014-01-23T08:18:06+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/dayone-font-setting</id>
    <content type="html"><![CDATA[<p>MacのDayOne.appを自分好みのフォント・レイアウトで使う方法。<br/>
このDayOneっていうジャーナルアプリ、iOSと連携しているしUXもいいしmarkdownも使えるしで、作業ログや日誌をつけるのによく使ってた。<br/>
だけど、選択できるフォントが少ない＆和文フォントは選択できない。<br/>
表示レイアウトも微妙・・・<br/>
なので、いつの日からかあまり使わなくなって放置ぎみ。<br/>
けど、ログが残ってないと過去に何をしたか、明日は何をやるつもりだったかわからない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>過去の自分 ≠ 今の自分</span></code></pre></td></tr></table></div></figure>


<p>なので、フォントとレイアウトを自分好みに設定できないか調べてみた。<br/>
こんな感じ。<br/>
<img src="http://mzgk.github.io/images/2014/0123/dayone.png" alt="Day One" /></p>

<!-- more -->


<h2>設定方法</h2>

<p>なんと、CSSで設定可能。<br/>
方法は以下。あとパーミッションの関係で途中にパスワード入力が必要になるかも。</p>

<ol>
<li>Finder > アプリケーションでDay One.appを選択</li>
<li>右クリック > パッケージの内容を表示</li>
<li><code>Application/Day One.app/Contents/Resources/</code> に移動する</li>
<li><code>DayOne-フォント名.css</code>（設定で指定しているフォント名）をデスクトップにコピー</li>
<li>元ファイルをリネーム</li>
<li>コピーしたファイルにCSSでフォントや文字間隔・行間隔など記述</li>
<li>元あったところに戻す</li>
<li>DayOneを再起動</li>
</ol>


<h2>ファイル</h2>

<p><code>DayOne-フォント名.css</code> には基本的にfont-familyのみが定義されている。<br/>
基本レイアウトなんかは、同じ場所にある <code>Dayone.css</code> に定義されている。<br/>
<code>DayOne-フォント名.css</code> にレイアウト等の記載をすることで、Dayone.cssの定義が上書き適用されるみたい。</p>

<h2>似たようなことは</h2>

<p>似たようなことは、GeekなエディタのFoldingText.appでもできる。<br/>
Macアプリのスタンダード仕様なんだろうか。<br/>
アプリの中に設定ファイルがあるパッケージ構成（アプリ≒ディレクトリ）ってWindowsに慣れていると合理的な感じがする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminalで空白が存在するパスの入力]]></title>
    <link href="http://mzgk.github.io/blog/2014/terminal-space-escape/"/>
    <updated>2014-01-09T06:19:00+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/terminal-space-escape</id>
    <content type="html"><![CDATA[<p>Terminalで空白が間に存在するようなディレクトリを認識させる方法。<br/>
普通に空白を入力しても認識されないので、エスケープさせる必要がある。<br/>
基本的な内容だけど、知らなかったので忘れないようにポスト。</p>

<!-- more -->


<h2>エスケープ</h2>

<p>例えば、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/Liblary/Application Support/</span></code></pre></td></tr></table></div></figure>


<p>のような場合、普通に入力すると <code>Application</code> と <code>Support</code> 間の空白が認識されず、パス不正になる。<br/>
なので、空白前にエスケープ（\）を入力する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/Liblary/Application\ Support/</span></code></pre></td></tr></table></div></figure>


<h2>シングルクウォート</h2>

<p>もしくは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd '~/Liblary/Application Support'</span></code></pre></td></tr></table></div></figure>


<p>のように <code>''</code> でくくる。</p>

<p>基本を知らなすぎる・・・</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText3 設定２ PackageContorl]]></title>
    <link href="http://mzgk.github.io/blog/2014/sublimetext-settings-2/"/>
    <updated>2014-01-07T06:08:57+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/sublimetext-settings-2</id>
    <content type="html"><![CDATA[<p>Sublime Text 3の設定について（Mac）。</p>

<ul>
<li>Package Controlの手動インストールの方法</li>
<li>GitHub FlavoredでのMarkdown Previewの方法</li>
</ul>


<!-- more -->


<h2>Package Controlの手動インストール</h2>

<p>職場等でのネットワーク環境の関係で、通常インストールが使用できない場合には自分でダウンロードして設定する必要がある。<br/>
方法は <a href="https://sublime.wbond.net/installation#Manual_Instructions">ここ（英語）</a> に記載してある。<br/>
要約すると、</p>

<ol>
<li>MenuBar : Preferences > Browse Packages&hellip; をクリック</li>
<li><code>~/Liblary/Application Support/Packages</code> が表示される（確認のため）</li>
<li><code>~/Liblary/Application Support/Install Packages</code> を開く</li>
<li><a href="https://sublime.wbond.net/installation#Manual_Instructions">ここ（英語）</a> から<code>Package Control.sublime-package</code>をダウンロード</li>
<li>3で開いた <code>~/Liblary/Application Support/Install Packages</code> ディレクトリに保存</li>
<li>Sublime Text 3を再起動</li>
</ol>


<h2>Markdown Preview(GitHub Flavored)の設定方法</h2>

<p>Markdown記法で入力しているファイルをブラウザでプレビューする方法。<br/>
GitHub Flavoredでプレビューできる。</p>

<ol>
<li>Package Control > Install Package > Markdown Preview</li>
<li>MenuBar : Preferences > KeyBind(User) をクリック</li>
<li><code>opt + m</code> で起動するようにショートカットキーを登録する</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// "parser"を"github"とすると、GitHub Flavoredでのプレビューとなる
</span><span class='line'>[
</span><span class='line'>{ "keys": ["alt+m"], "command": "markdown_preview", "args": {"target": "browser", "parser": "github"} },
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText3 設定１ キーバインド設定]]></title>
    <link href="http://mzgk.github.io/blog/2014/sublimetext-settings-1/"/>
    <updated>2014-01-03T08:29:34+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/sublimetext-settings-1</id>
    <content type="html"><![CDATA[<p>Sublime Text3を使いはじめたので、その際の設定について。<br/>
Tabキーでの日本語予測変換の設定。<br/>
F7でのカタカナ変換の設定。<br/>
このエディタはvimモードが使えたり、設定を自分でいじれたりで心地がいい。<br/>
行間の設定ができるのはうれしい限り。</p>

<h2>キーバインドの変更の準備</h2>

<ol>
<li>メニューバー → Preferences → KeyBind(Default)からファイルを開く</li>
<li>内容をすべてコピー</li>
<li>新規ファイルを作成し、ペースト</li>
<li>名前をつけて保存<br/>
ファイル名：<code>Default (OSX).sublime-keymap</code><br/>
パス：<code>~/Library/Application Support/Sublime Text 3/Packages/Default/</code><br/>
Defaultディレクトリが存在しない場合は作成。</li>
</ol>


<!-- more -->


<h2>F7でカタカナ変換の方法</h2>

<p>保存したファイルを開いて、以下をコメントアウト（行頭に//）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ "keys": ["f7"], "command": "build" },  </span></code></pre></td></tr></table></div></figure>


<h2>Tabで予測変換確定</h2>

<p>以下をコメントアウト（行頭に//）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ "keys": ["tab"], "command": "insert_best_completion", "args": {"default": "\t", "exact": true} },
</span><span class='line'>{ "keys": ["tab"], "command": "insert_best_completion", "args": {"default": "\t", "exact": false},
</span><span class='line'>    "context":
</span><span class='line'>    [
</span><span class='line'>      { "key": "setting.tab_completion", "operator": "equal", "operand": true }
</span><span class='line'>    ]
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Octopress Blogへの投稿手順]]></title>
    <link href="http://mzgk.github.io/blog/2013/procedure-to-post/"/>
    <updated>2013-12-31T12:25:41+09:00</updated>
    <id>http://mzgk.github.io/blog/2013/procedure-to-post</id>
    <content type="html"><![CDATA[<p>Octopressでの投稿手順（基本的な）。<br/>
ファイルの作成→編集→確認→デプロイ→プッシュまで。</p>

<h2>手順</h2>

<h3>1. ポストファイルの生成</h3>

<p><code>source/_post</code> ディレクトリにファイルが作成される。<br/>
yyyy-mm-dd-title.markdown<br/>
titleは英数のみ。文字間に半角空白の使用が可能（-に変換される）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>2. 記事作成</h3>

<p>作成されたファイルを編集。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// yaml部分
</span><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "title"　←　ここは日本語に変更可能
</span><span class='line'>date: 2013-12-31 12:25:41 +0900
</span><span class='line'>comments: true
</span><span class='line'>categories: 
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>このあとに１行空けて記事を書く。<br/>
画像は <code>source/images/yyyy/mm</code> に格納。<br/>
パスは相対パスを記述 <code>/images/yyyy/mm</code><br/>
リサイズすること。<br/>
公式：<a href="http://octopress.org/docs/plugins/image-tag/">Octopress Image Tag</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt-text](パス "タイトル")  
</span><span class='line'>{ % img left/right パス width height alt-text %}  
</span><span class='line'>//{ と %間の空白は不要</span></code></pre></td></tr></table></div></figure>


<p>適当な部分で <code>&lt;!-- more --&gt;</code> を挿入。</p>

<h3>3. プレビュー確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake preview  </span></code></pre></td></tr></table></div></figure>


<p><a href="http://localhost:4000">http://localhost:4000</a></p>

<h3>4. 静的ファイル生成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ rake generate  </span></code></pre></td></tr></table></div></figure>


<h3>5. デプロイ</h3>

<p>GitHubのリポジトリにpushされる（反映までタイムラグがある？）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<hr />

<p>以降はソース管理の部分</p>

<h3>6. ファイル管理の確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status</span></code></pre></td></tr></table></div></figure>


<h3>7. ステージング</h3>

<p>追加・編集したファイルをステージング。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add -A</span></code></pre></td></tr></table></div></figure>


<h3>8. コミット</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m "コミットメッセージ"</span></code></pre></td></tr></table></div></figure>


<h3>9. Bitbucketへプッシュ</h3>

<p>構築時のリモートリポジトリ指定時に <code>-u</code> しているため指定不要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Octopress OctopressとGitHub・Bitbucket]]></title>
    <link href="http://mzgk.github.io/blog/2013/start-octopress/"/>
    <updated>2013-12-30T06:30:08+09:00</updated>
    <id>http://mzgk.github.io/blog/2013/start-octopress</id>
    <content type="html"><![CDATA[<p>OctopressでBolg開設。GitHub・Bitbucket・localの環境構築とブログの表示まで。</p>

<h2>なぜOctopressを選んだか？</h2>

<ul>
<li>ポストファイルを静的ファイルとして管理したかった</li>
<li>Markdownで記述→generate→deploy→pushの手軽さ</li>
<li>Git・GitHub・Markdownのスキルを身につけたい</li>
<li>A blogging framework for hackers.</li>
</ul>


<!-- more -->


<h2>環境</h2>

<ul>
<li>2013.12.25作成</li>
<li>OS X 10.9.12</li>
<li><a href="https://github.com/" title="GitHub">GitHub</a>：アカウント作成済み・SSH確立済み</li>
<li><a href="https://bitbucket.org/" title="Bitbucket">Bitbucket</a>：アカウント作成済み・SSH確立済み</li>
<li>Git：インストール済み（1.8.1）</li>
<li>Ruby：インストール済み（1.9.3p194）</li>
<li>~/mzgk.github.ioでローカル側作業を想定（ここにOctopress一式＆Bitbucketで管理）</li>
</ul>


<h2>GitHub</h2>

<ul>
<li>GitHub Pagesを使用するので、USERNAME.github.ioでリポジトリを作成</li>
<li>USERNAMEはGitHubのログインユーザ：ここではmzgk.github.ioで作成</li>
<li>Public</li>
<li>READMEは生成しない</li>
</ul>


<p><img src="http://mzgk.github.io/images/2013/1230/01_github.png" alt="GitHub" /></p>

<h2>Local（Mac）</h2>

<p>OctopressをGitHubからcloneする。</p>

<ul>
<li>Terminalを起動</li>
<li>ホームディレクトリに移動（~/mzgk.github.ioで管理したいため）</li>
<li>$ git clone git://github.com/imathis/octopress.git mzgk.github.io</li>
<li>最後をmzgk.github.ioとするこことで、ホームディレクトリ直下にmzgk.github.ioディレクトリが作成される</li>
<li>公式ではoctopressを指定</li>
</ul>


<p><img src="http://mzgk.github.io/images/2013/1230/02_octopress.png" alt="clone octopress" /></p>

<h2>Octopress Setup</h2>

<p>公式：<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<ul>
<li>Terminal作業</li>
<li>$ cd ~/mzgk.github.io　→　Octopress一式をcloneしたディレクトリに移動</li>
<li>$ gem install bundler</li>
<li>$ rbenv rehash　→　自分の環境がrbenvを使用しているから必要だった？</li>
<li>$ bundle install</li>
<li>$ rake install　→　公式テーマのインストール</li>
</ul>


<p><img src="http://mzgk.github.io/images/2013/1230/03_rake_install.png" alt="rake install" /></p>

<h2>GitHub Pagesとの接続</h2>

<ul>
<li>Terminal作業（作業ディレクトリは引き続き~/mzgk.github.io）</li>
<li>$ rake setup_github_pages</li>
<li>URLの入力を求められるので、ブラウザでGitHubのリポジトリにアクセス</li>
<li>HTTP / SSHの対応している方をクリックし、テキストボックスに表示されるアドレスをコピー（右端のアイコン）</li>
<li>Terminal（Repository url: ）に貼付けてreturnキー</li>
</ul>


<p><img src="http://mzgk.github.io/images/2013/1230/04_setup_github_pages.png" alt="setup_github_pages" /></p>

<h2>サイトの生成と確認</h2>

<ul>
<li>Terminal作業（作業ディレクトリは引き続き~/mzgk.github.io）</li>
<li>$ rake generate　→　HTMLファイルを生成</li>
<li>$ rake deploy　→　GitHubにデプロイ

<ul>
<li>_deployディレクトリがGitHubのリポジトリにpushされている模様</li>
</ul>
</li>
</ul>


<p><img src="http://mzgk.github.io/images/2013/1230/05_rake_deploy_local.png" alt="rake_deploy_local" />
<img src="http://mzgk.github.io/images/2013/1230/06_rake_deploy_github.png" alt="rake_deploy_github" /></p>

<ul>
<li>10分程度してからブラウザで<code>http://mzgk.github.io</code>にアクセス

<ul>
<li>標準テーマで、記事のない「My Octopress Blog」が表示される</li>
<li>時間が早いと404ページが表示される</li>
</ul>
</li>
</ul>


<p><img src="http://mzgk.github.io/images/2013/1230/07_my_octopress_blog.png" alt="my_octopress_blog" /></p>

<ul>
<li>いつまで経っても表示されない場合はTerminalを確認。途中でエラーの可能性あり。</li>
<li>自分は$ rake deployでGitHubへのpushがrejectされていた（GitHubでREADMEを作成し編集していたため）</li>
</ul>


<h2>Bitbucketでソース管理</h2>

<p>ブログに関するすべてをプライベートなリポジトリで管理したかったので選択。<br/>
~/mzgk.github.io以下をBitbucketに作成したプライベート用リポジトリで管理</p>

<ul>
<li>ブラウザで<a href="https://bitbucket.org/" title="Bitbucket">Bitbucket</a>にアクセスし、ログイン</li>
<li>プリベートリポジトリを作成（名前はmzgk.github.io）
<img src="http://mzgk.github.io/images/2013/1230/08_bitbucket.png" alt="bitbucket" /></li>
<li>Terminal作業（作業ディレクトリは引き続き~/mzgk.github.io）</li>
<li>~/mzgk.github.io/sassとsourceをステージング

<ul>
<li>$ git add .</li>
</ul>
</li>
<li>リモートリポジトリを追加

<ul>
<li>$ git remote add bitbucket git@bitbucket.org:mzgk/mzgk.github.io.git</li>
</ul>
</li>
<li>Bitbucketにプッシュ

<ul>
<li>$ git push -u bitbucket source</li>
<li>以降はgit pushだけで、Bitbucketにpushされる（-uオプション）</li>
</ul>
</li>
<li>~/mzgk.github.io/_deployとpublicは.gitignoreで除外されていた</li>
</ul>


<p><img src="http://mzgk.github.io/images/2013/1230/09_bitbucket_push.png" alt="bitbucket_push" /></p>

<h2>ハマった点</h2>

<ul>
<li>GitHubでリポジトリ作成時にREADMEを自動生成したため、$ rake_deployでローカルと不整合が発生</li>
<li>ローカルで作業・管理するディレクトリの構成をどうするかで悩む

<ul>
<li>Blogに関わるすべてを１つのディレクトリで管理したかった</li>
</ul>
</li>
<li>そもそもGit・GitHub・Rubyに関する知識が不足していた（使用経験は限りなくゼロ）

<ul>
<li>けど、知らなくてもなんとかなる手軽さ</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>

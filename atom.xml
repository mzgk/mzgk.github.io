<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jubilee]]></title>
  <link href="http://mzgk.github.io/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-05T17:45:54+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UITableViewのセル編集をさせない方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/not-allowed-to-edit-cell/"/>
    <updated>2014-08-05T17:42:38+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/not-allowed-to-edit-cell</id>
    <content type="html"><![CDATA[<p>セルスワイプでの削除をやめる方法。<br/>
セルの編集を許可するかどうかを返すメソッドでNOを返す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">canEditRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Return NO if you do not want the specified item to be editable.</span>
</span><span class='line'>    <span class="c1">// TODO: セル削除を可能にする時はYESに変更すること</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしくは、以下のメソッドをコメントアウト。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">commitEditingStyle:</span><span class="p">(</span><span class="n">UITableViewCellEditingStyle</span><span class="p">)</span><span class="nv">editingStyle</span> <span class="nf">forRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">editingStyle</span> <span class="o">==</span> <span class="n">UITableViewCellEditingStyleDelete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_objects</span> <span class="nl">removeObjectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">tableView</span> <span class="nl">deleteRowsAtIndexPaths:</span><span class="err">@</span><span class="p">[</span><span class="n">indexPath</span><span class="p">]</span> <span class="nl">withRowAnimation:</span><span class="n">UITableViewRowAnimationFade</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">editingStyle</span> <span class="o">==</span> <span class="n">UITableViewCellEditingStyleInsert</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アプリのデータをiTunesで共有する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/share-itunes/"/>
    <updated>2014-08-05T17:11:29+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/share-itunes</id>
    <content type="html"><![CDATA[<p>アプリ内のデータをiTunesから取得したり、追加したりする際の設定方法。<br/>
デバイスをiTunesに接続し、上のAppタブを選択、ファイル共有で対象のアプリを選択すると、共有できるファイルが表示される。</p>

<h2>Supporting Files</h2>

<ul>
<li>｛アプリ名｝-Info.plistを開く</li>
<li>Information Property Listの隣の＋をクリックし、行を追加</li>
<li>Application supports iTunes file sharingを選択</li>
<li>値のYESを選択</li>
</ul>


<p><img src="http://mzgk.github.io/images/2014/0805/iTunes_1.png" alt="iTunes共有1" /></p>

<p>参考：
<a href="http://qiita.com/SolaRayLino/items/8a4eb1821559122b4cbf">http://qiita.com/SolaRayLino/items/8a4eb1821559122b4cbf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アプリのバージョン取得]]></title>
    <link href="http://mzgk.github.io/blog/2014/get-app-version/"/>
    <updated>2014-08-05T17:07:29+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/get-app-version</id>
    <content type="html"><![CDATA[<p>ソース内でアプリのバージョンを取得する方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// バージョン：TARGET- General - Identity - Version（Info.plist : Bundle version strings short）</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">version</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span><span class="n">infoDictionary</span><span class="p">][</span><span class="s">@&quot;CFBundleShortVersionString&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// バンドル：TARGET- General - Identity - Bundle（Info.plist : Bundle version）</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span><span class="n">infoDictionary</span><span class="p">][</span><span class="s">@&quot;CFBundleVersion&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>VersionとBundleの違いについては、理解不足。</p>

<ul>
<li>Version

<ul>
<li>表記用のリリースバージョン</li>
</ul>
</li>
<li>Bundle

<ul>
<li>内部開発用のビルドバージョン</li>
</ul>
</li>
</ul>


<p>とのことみたいだが、リリース時は両方が一致している必要があるらしいとのこと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カテゴリファイルの作り方]]></title>
    <link href="http://mzgk.github.io/blog/2014/make-category/"/>
    <updated>2014-08-05T16:49:30+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/make-category</id>
    <content type="html"><![CDATA[<p>カテゴリファイルを作る際の命名方法。<br/>
カテゴリーファイルを選択して、</p>

<p><img src="http://mzgk.github.io/images/2014/0805/Category.png" alt="Xcode" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カメラで撮影した動画をフレーム分割する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/video-devide/"/>
    <updated>2014-08-05T16:24:50+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/video-devide</id>
    <content type="html"><![CDATA[<p>UIImagePickerで撮影した動画を1秒30フレーム程度で、分割し静止画にする方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/*!</span>
</span><span class='line'><span class="cm"> * 撮影ボタン（作成する）</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">shutterButtonTapped:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// UIImagePickerで動画の撮影をする</span>
</span><span class='line'>    <span class="n">UIImagePickerController</span> <span class="o">*</span><span class="n">picker</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImagePickerController</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">picker</span><span class="p">.</span><span class="n">sourceType</span> <span class="o">=</span> <span class="n">UIImagePickerControllerSourceTypeCamera</span><span class="p">;</span>
</span><span class='line'>    <span class="n">picker</span><span class="p">.</span><span class="n">mediaTypes</span> <span class="o">=</span> <span class="err">@</span><span class="p">[(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kUTTypeMovie</span><span class="p">];</span>
</span><span class='line'>    <span class="n">picker</span><span class="p">.</span><span class="n">cameraCaptureMode</span> <span class="o">=</span> <span class="n">UIImagePickerControllerCameraCaptureModeVideo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">picker</span><span class="p">.</span><span class="n">videoQuality</span> <span class="o">=</span> <span class="n">UIImagePickerControllerQualityType640x480</span><span class="p">;</span>
</span><span class='line'>    <span class="n">picker</span><span class="p">.</span><span class="n">videoMaximumDuration</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="n">picker</span><span class="p">.</span><span class="n">allowsEditing</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">picker</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">picker</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*!</span>
</span><span class='line'><span class="cm"> * 撮影終了のタイミング</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">imagePickerController:</span><span class="p">(</span><span class="n">UIImagePickerController</span> <span class="o">*</span><span class="p">)</span><span class="nv">picker</span> <span class="nf">didFinishPickingMediaWithInfo:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">info</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// UIImagePickerをしまう</span>
</span><span class='line'>    <span class="p">[</span><span class="n">picker</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ~/Documentsディレクトリの取得</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">directories</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">documentDirectory</span> <span class="o">=</span> <span class="n">directories</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 撮影した動画をAssetに格納</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">assetURL</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="n">UIImagePickerControllerMediaURL</span><span class="p">];</span>
</span><span class='line'>    <span class="n">AVURLAsset</span> <span class="o">*</span><span class="n">asset</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVURLAsset</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithURL:</span><span class="n">assetURL</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 動画を切り出す間隔を配列に格納する</span>
</span><span class='line'>    <span class="n">Float64</span> <span class="n">frameParSecond</span> <span class="o">=</span> <span class="mf">0.033f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Float64</span> <span class="n">durationSeconds</span> <span class="o">=</span> <span class="n">CMTimeGetSeconds</span><span class="p">([</span><span class="n">asset</span> <span class="n">duration</span><span class="p">]);</span>   <span class="c1">// 動画の長さ</span>
</span><span class='line'>    <span class="n">Float64</span> <span class="n">frameTimeStamp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">times</span>  <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">frameTimeStamp</span> <span class="o">&lt;=</span> <span class="n">durationSeconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">times</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCMTime:</span><span class="n">CMTimeMakeWithSeconds</span><span class="p">(</span><span class="n">frameTimeStamp</span><span class="p">,</span> <span class="mi">600</span><span class="p">)]];</span>
</span><span class='line'>        <span class="n">CMTime</span> <span class="n">nextTime</span> <span class="o">=</span> <span class="n">CMTimeMakeWithSeconds</span><span class="p">(</span><span class="n">frameTimeStamp</span><span class="p">,</span> <span class="mi">600</span><span class="p">);</span>
</span><span class='line'>        <span class="n">frameTimeStamp</span> <span class="o">=</span> <span class="n">CMTimeGetSeconds</span><span class="p">(</span><span class="n">nextTime</span><span class="p">)</span> <span class="o">+</span> <span class="n">frameParSecond</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 画像ジェネレーターを生成</span>
</span><span class='line'>    <span class="n">AVAssetImageGenerator</span> <span class="o">*</span><span class="n">generator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVAssetImageGenerator</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithAsset:</span><span class="n">asset</span><span class="p">];</span>
</span><span class='line'>    <span class="n">generator</span><span class="p">.</span><span class="n">appliesPreferredTrackTransform</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">generator</span><span class="p">.</span><span class="n">requestedTimeToleranceBefore</span> <span class="o">=</span> <span class="n">kCMTimeZero</span><span class="p">;</span>
</span><span class='line'>    <span class="n">generator</span><span class="p">.</span><span class="n">requestedTimeToleranceAfter</span> <span class="o">=</span> <span class="n">kCMTimeZero</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 一連の画像を生成（timesに格納されている分だけ、第２引数がコールバックされる）</span>
</span><span class='line'>    <span class="p">[</span><span class="n">generator</span> <span class="nl">generateCGImagesAsynchronouslyForTimes:</span><span class="n">times</span>
</span><span class='line'>                                    <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">CMTime</span> <span class="n">requestedTime</span><span class="p">,</span> <span class="n">CGImageRef</span> <span class="n">image</span><span class="p">,</span> <span class="n">CMTime</span> <span class="n">actualTime</span><span class="p">,</span> <span class="n">AVAssetImageGeneratorResult</span> <span class="n">result</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                        <span class="n">NSString</span> <span class="o">*</span><span class="n">requestedTimeString</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">CFBridgingRelease</span><span class="p">(</span><span class="n">CMTimeCopyDescription</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">requestedTime</span><span class="p">));</span>
</span><span class='line'>                                        <span class="n">NSString</span> <span class="o">*</span><span class="n">acturalTimeString</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">CFBridgingRelease</span><span class="p">(</span><span class="n">CMTimeCopyDescription</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">actualTime</span><span class="p">));</span>
</span><span class='line'>                                        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Requested: %@; actual: %@&quot;</span><span class="p">,</span> <span class="n">requestedTimeString</span><span class="p">,</span> <span class="n">acturalTimeString</span><span class="p">);</span>
</span><span class='line'>                                        <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">AVAssetImageGeneratorSucceeded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                            <span class="c1">// JPEG画像を生成し、保存する</span>
</span><span class='line'>                                            <span class="p">[</span><span class="n">self</span> <span class="nl">writeCGImageTo:</span><span class="n">documentDirectory</span> <span class="nl">image:</span><span class="n">image</span><span class="p">];</span>
</span><span class='line'>                                            <span class="c1">// iCnt++;</span>
</span><span class='line'>                                            <span class="c1">// 完了した判断はtimesの個数と保存した個数でする？</span>
</span><span class='line'>                                            <span class="c1">// [times count] == iCntだったら、SVProgressHub停止みたいな</span>
</span><span class='line'>                                        <span class="p">}</span>
</span><span class='line'>                                        <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">AVAssetImageGeneratorFailed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Failed with error: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>                                        <span class="p">}</span>
</span><span class='line'>                                        <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">AVAssetImageGeneratorCancelled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Cancelled&quot;</span><span class="p">);</span>
</span><span class='line'>                                        <span class="p">}</span>
</span><span class='line'>                                    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*!</span>
</span><span class='line'><span class="cm"> * 動画から切り出されたCGImageRef形式のデータをJPEG画像（ファイル名は連番：imageNameNumber）に生成し、指定ディレクトリに書き出す</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">writeCGImageTo:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">path</span> <span class="nf">image:</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nv">cgImage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Called&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;img_%@.jpg&quot;</span><span class="p">,</span> <span class="err">@</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">imageNameNumber</span><span class="o">++</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">path</span> <span class="nl">stringByAppendingPathComponent:</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">saveImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">cgImage</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="n">saveImage</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>   <span class="c1">// 0.0（低水準）〜1.0（高水準）</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span> <span class="nl">writeToFile:</span><span class="n">path</span> <span class="nl">atomically:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：公式の「AVFoundationプログラミングガイド」P17 アセットの使用　ビデオから静止画像の取得　一連の画像の生成</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シングルトン（singleton）]]></title>
    <link href="http://mzgk.github.io/blog/2014/singleton/"/>
    <updated>2014-08-05T16:14:13+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/singleton</id>
    <content type="html"><![CDATA[<p>シングルトンとは？</p>

<ul>
<li>デザインパターンの１つ</li>
<li>「ただ１つの」インスタンスしか持たない→どこからアクセスしても同じインスタンス</li>
<li>複数のクラス間での変数やオブジェクトの共有が可能</li>
<li>複数のクラス間でメソッドの共有ができる</li>
<li>NSUserdefaultsと同様</li>
</ul>


<h3>SingletonManager.h</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">SingletonSample</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="c1">// このシングルトンが管理するプロパティ</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">managedParam</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">catName</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// インスタンス作成のためのクラスメソッド</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="n">SingletonSample</span> <span class="o">*</span><span class="p">)</span><span class="n">sharedManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// このシングルトンが保有するメソッド</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SingletonManager.m</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">SingletonManager</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">id</span> <span class="n">sharedManager_</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">sharedManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">sharedData_</span> <span class="o">=</span> <span class="p">[</span><span class="n">SingletonManager</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedManager_</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sampleMethod:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ViewController.m</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;SingletonManager.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">SingletonManager</span> <span class="o">*</span><span class="n">single</span> <span class="o">=</span> <span class="p">[</span><span class="n">SingletonManager</span> <span class="n">sharedManager</span><span class="p">];</span>
</span><span class='line'>    <span class="n">single</span><span class="p">.</span><span class="n">managedParam</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// 変数に値をセット</span>
</span><span class='line'>    <span class="p">[</span><span class="n">single</span> <span class="nl">sampleMethod:</span><span class="n">name</span><span class="p">];</span> <span class="c1">// メソッドを使用</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：<br/>
<a href="http://ylb.jp/iOSDev/SingletonSample.pdf  ">http://ylb.jp/iOSDev/SingletonSample.pdf  </a>
<a href="http://qiita.com/yuky_az/items/27031ec5ca55a95d6209">http://qiita.com/yuky_az/items/27031ec5ca55a95d6209</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビューの重なり順を変更する]]></title>
    <link href="http://mzgk.github.io/blog/2014/chage-view-overlap/"/>
    <updated>2014-08-05T15:34:39+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/chage-view-overlap</id>
    <content type="html"><![CDATA[<p>ビューの重なり順をコードで変更する方法。</p>

<h2>自分に追加されているサブビューの配列を取得</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">subviews</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自分と同じスーパービューをもつサブビューの配列を取得</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">superview</span><span class="p">.</span><span class="n">subviews</span>
</span></code></pre></td></tr></table></div></figure>


<h2>挿入位置をインデックス番号で指定する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">insertSubview:</span><span class="n">_imageView</span> <span class="nl">atIndex:</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>指定ビューの前／後ろに挿入する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// _targetViewの下にする</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">insertSubview:</span><span class="n">_imageView</span> <span class="nl">belowSubview:</span><span class="n">_targetView</span><span class="p">];</span>
</span><span class='line'><span class="c1">// _targetViewの上にする</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">insertSubview:</span><span class="n">_imageView</span> <span class="nl">aboveSubview:</span><span class="n">_targetView</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ビューを最前面／再背面に移動させる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 最前面</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">bringSubviewToFront:</span><span class="n">_imageView</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 再背面</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">sendSubviewToBack:</span><span class="n">_imageView</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>指定したインデックスのビューの重なりを入れ替える</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 1番目と3番目を入れ替える</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">exchangeSubviewAtIndex:</span><span class="mi">1</span> <span class="nl">withSubviewAtIndex:</span><span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ファイルパス（NSString）をNSURLに変換する方法（日本語OK）]]></title>
    <link href="http://mzgk.github.io/blog/2014/filepath-nsurl/"/>
    <updated>2014-08-05T15:07:00+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/filepath-nsurl</id>
    <content type="html"><![CDATA[<p>日本語のディレクトリ名が入るとおかしくなるが、この方法だとOK。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSString</span><span class="o">*</span> <span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;/Users/abt/Documents/日本語のフォルダ名/file.txt&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSURL</span><span class="o">*</span> <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="n">string</span><span class="p">];</span>
</span><span class='line'><span class="c1">// NGケース（nilが返る）</span>
</span><span class='line'><span class="n">NSURL</span><span class="o">*</span> <span class="n">nilUrl</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">string</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[引っ張って更新を使う（UITableViewController / UITableView）]]></title>
    <link href="http://mzgk.github.io/blog/2014/uirefreshcontrol/"/>
    <updated>2014-08-05T14:42:13+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/uirefreshcontrol</id>
    <content type="html"><![CDATA[<p>UITableViewControllerを使うか、UITableViewを直で使うかによって、コードの差異あり。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITableView</span> <span class="o">*</span><span class="n">postlistTableView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIRefreshControl</span> <span class="o">*</span><span class="n">refreshControl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_refreshControl</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIRefreshControl</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_postlistTableView</span> <span class="nl">addSubview:</span><span class="n">_refreshControl</span><span class="p">];</span>    <span class="c1">// （差異）UITableViewを直で使う場合</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="n">refreshControl</span><span class="p">;</span>               <span class="c1">// （差異）UITableViewControllerを使う場合</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_refreshControl</span> <span class="nl">addTarget:</span><span class="n">self</span>
</span><span class='line'>                        <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">refreshOccured:</span><span class="p">)</span>    <span class="c1">// 更新時の処理を行う自作メソッド名</span>
</span><span class='line'>              <span class="nl">forControlEvents:</span><span class="n">UIControlEventValueChanged</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_postlistTableView</span><span class="p">.</span><span class="n">alwaysBounceVertical</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>          <span class="c1">// セルが空でも可能とする</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">refreshOccured:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 更新で行う処理を記述</span>
</span><span class='line'>    <span class="c1">// 更新処理を終了させる</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_refreshControl</span> <span class="n">endRefreshing</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_postlistTableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[作りの格言]]></title>
    <link href="http://mzgk.github.io/blog/2014/maxim/"/>
    <updated>2014-08-05T14:31:43+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/maxim</id>
    <content type="html"><![CDATA[<blockquote><p>Do not amaze everyone, But rescure yourself.<br/>
多くの人を感動させようとする前に、まず自分自身を救え。</p>

<p>Done is better than perfect.<br/>
完璧を目指すより、まず終わらせろ。</p>

<p>Eat your own dogfood, and Serve your best dogfood.<br/>
自分自身がユーザーであれ、そして良いと思ったものを誇りをもって出せ。</p>

<p>There is worth, there is a way.<br/>
ユーザーが対価を払う方法は必ずある、だから価値のあるものを作れ。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[対象のビューがサブビューかどうか判断する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/confirm-subview/"/>
    <updated>2014-08-05T14:26:28+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/confirm-subview</id>
    <content type="html"><![CDATA[<p>対象のビューがサブビューかどうか（ビューに存在しているか？）を判断する方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// メモリから破棄されないように&quot;strong&quot;を指定</span>
</span><span class='line'><span class="err">@</span><span class="n">preoperty</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomatic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">myLabel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">removeAllLabel:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">_mylabel</span> <span class="nl">isDescendantOfView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ビューから取り除く</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_myLabel</span> <span class="n">removeFromSuperView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ビューに追加する</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSuperView:</span><span class="n">_mylabel</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>スーパービューを調べる</h2>

<p><code>_myLabel.superView</code> でも、_myLabelにスーパービューがあるかどうか調べられる。</p>

<h2>取り除く≒非表示</h2>

<p><code>_myLabel.hidden = YES;</code> で、取り除くことなく非表示化できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeで例外が発生した場所を特定する]]></title>
    <link href="http://mzgk.github.io/blog/2014/exception-breakpoint/"/>
    <updated>2014-08-05T14:00:51+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/exception-breakpoint</id>
    <content type="html"><![CDATA[<p>Xcodeでのデバック実行中に例外が発生した場合、mainで終了し、どこで例外が発生したのかがわからない場合がある。<br/>
そんな時に有効な設定。</p>

<p>ナビゲーションエリア　→　ブレークポイントナビゲーター（⌘+7）→　左下の＋ボタン　→　Add Exception Breakpoint&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[論理演算子を使って状態を逆転させる]]></title>
    <link href="http://mzgk.github.io/blog/2014/logicaloperator/"/>
    <updated>2014-08-05T13:13:59+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/logicaloperator</id>
    <content type="html"><![CDATA[<p>スイッチのON／OFFなどで、イメージの表示／非表示を制御する際の方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">switchChange:</span><span class="p">(</span><span class="n">UISwitch</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// スイッチのON/OFFと逆の設定をする方法</span>
</span><span class='line'>    <span class="n">_photo</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="n">sender</span><span class="p">.</span><span class="n">on</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 状態の逆転をさせる方法</span>
</span><span class='line'>    <span class="n">_photo</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="n">_photo</span><span class="p">.</span><span class="n">hidden</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第５回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-5/"/>
    <updated>2014-02-22T12:44:01+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-5</id>
    <content type="html"><![CDATA[<p>Bitbucketで管理しているOctopressブログ環境を取得し、ローカルに再構築する。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）　&lt;&ndash; <strong>いまここ</strong></li>
</ol>


<!-- more -->


<h2>手順</h2>

<ol>
<li>Octopressブログ環境の取得（Bitbucketから）</li>
<li>bundlerのインストール</li>
<li>GitHubとOctopressを繋げる</li>
<li>GitHubリポジトリ（mzgk.github.io）の削除／再作成（他に解決法はあると思う）</li>
<li>記事作成 &ndash;> デプロイ</li>
<li>Octopressブログ環境を管理（Bitbucket）</li>
</ol>


<h2>1. Octopressブログ環境の取得</h2>

<p>BitbucketのリポジトリでOctopressローカル環境を管理していたので、$ git clone でローカルにファイルを取得する。<br/>
Terminalを起動し、ディレクトリを作成したい場所まで移動。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@bitbucket.org:mzgk/mzgk.github.io.git
</span><span class='line'>...
</span><span class='line'>Checking connectivity... done</span></code></pre></td></tr></table></div></figure>


<p>これでローカルにmzgk.github.ioディレクトリが作成され、ブログ環境一式が取得できる。</p>

<h2>2. bundlerインストール</h2>

<p>予想していなかったが、bundlerのインストールが必要だった。<br/>
テーマは既にあるので <code>$ rake install</code> は不要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Octopress環境のディレクトリに移動して
</span><span class='line'>$ gem install bundler
</span><span class='line'>...
</span><span class='line'>Installing RDoc documentation for bundler-1.5.3...
</span><span class='line'>$ rbenv rehash
</span><span class='line'>$ bundle install
</span><span class='line'>...
</span><span class='line'>Your bundle is complete!</span></code></pre></td></tr></table></div></figure>


<h2>3. GitHubとOctopressを繋げる</h2>

<p>これも予想していなかったが、ローカルとGitHub Pagesの接続が必要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Octopress環境のディレクトリに移動して
</span><span class='line'>$ rake setup_github_pages
</span><span class='line'>...
</span><span class='line'>Repository url:ここにGitHubリポジトリの「SSH clone URL」をペースト
</span><span class='line'>...
</span><span class='line'>## Now you can deploy to git@...</span></code></pre></td></tr></table></div></figure>


<h2>4. GitHubリポジトリ（mzgk.github.io）の削除／再作成（※※解決法あり）</h2>

<p>なぜか、<code>$rake deploy</code> でエラーが発生して失敗する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>To git@github.com:mzgk/mzgk.github.io.git
</span><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class='line'>error: failed to push some refs to 'git@github.com:mzgk/mzgk.github.io.git'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
</span><span class='line'>hint: before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure>


<p>よくわからず…（-fの方法は？）<br/>
コンフリクトしているみたいなので、デプロイ先のGitHubのリポジトリを消してみる。<br/>
再度、$ rake deployでうまくいく。</p>

<p>※※<br/>
Rakefileを以下のように変更してdeployすると大丈夫だとのこと（今回は試してはいない）。<br/>
L264行目あたり</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "git push origin #{deploy_branch}"
</span><span class='line'>↓
</span><span class='line'>system "git push origin +#{deploy_branch}"</span></code></pre></td></tr></table></div></figure>


<h2>5. 記事作成->デプロイ</h2>

<p>あとはいつも通りの流れ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ポストファイル作成（source/_postsにyyyy-mm-dd-title.markdown）
</span><span class='line'>$ rake new_post["title"]
</span><span class='line'>// 記事を書いて
</span><span class='line'>// 生成
</span><span class='line'>$ rake generate
</span><span class='line'>// プレビュー（localhost:4000）
</span><span class='line'>$ rake preview
</span><span class='line'>// デプロイ
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>6. Octopressブログ環境を管理（Bitbucket）</h2>

<p>ローカル環境をリモートリポジトリBitbucketにPUSHして管理。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "コメント"
</span><span class='line'>// リモートリポジトリを追加
</span><span class='line'>$ git remote add bitbucket git@bitbucket.org:mzgk/mzgk.github.io.git
</span><span class='line'>// リモートリポジトリにPush（以後は$ git pushのみで可）
</span><span class='line'>$ git push -u bitbucket source</span></code></pre></td></tr></table></div></figure>


<h2>以上</h2>

<p>以上で、無事に終了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第４回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-4/"/>
    <updated>2014-02-22T12:38:07+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-4</id>
    <content type="html"><![CDATA[<p>Macも新しくなったので、SSH鍵の設定をあらためて実施。<br/>
GitHub, Biubucketに対して行う。<br/>
別々の鍵ファイルを用意した方がいいのかもしれないが、今回は一つのファイルでやってみる。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）　&lt;&ndash; <strong>いまここ</strong></li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>方針</h2>

<ul>
<li>一つの鍵ファイルをGitHubとBitbucketに使用する</li>
<li>ファイル名（-f）をつける（誤って上書きしないように）<br/>
id_rsa.jd-repository</li>
<li>コメント（-C）は、ユーザ名@マシン名<br/>
JohnDoe@jd-mbp15</li>
<li>パスフレーズなし</li>
</ul>


<h2>鍵の作成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/.ssh
</span><span class='line'>No such file or directory
</span><span class='line'>$ mkdir .ssh
</span><span class='line'>$ cd .ssh
</span><span class='line'>$ ssh-keygen -t rsa -C "JohnDoe@jd-mbp15"
</span><span class='line'>Enter file in witch to save the key: id_rsa.jd-repository &lt;-ここでファイル名をつける
</span><span class='line'>...
</span><span class='line'>+--[ RSA 2048]----+
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>ssh-keygenコマンドのオプションの内容は以下。<br/>
-t：鍵の種類<br/>
-b：ビット数（デフォルト2048なので指定不要）<br/>
-C：コメント</p>

<h2>ファイル生成確認</h2>

<p>生成されたかを確認する。<br/>
id_rsa.repository：秘密鍵<br/>
id_rsa.repository.pub：公開鍵</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -la
</span><span class='line'>-rw-------   1 JohnDoe  staff  1675  2 16 17:03 id_rsa.jd-repository
</span><span class='line'>-rw-r--r--   1 JohnDoe  staff   396  2 16 17:03 id_rsa.jd-repository.pub</span></code></pre></td></tr></table></div></figure>


<h2>ファイルのパーミッションを変更</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 600 id_rsa.jd-repository</span></code></pre></td></tr></table></div></figure>


<p>必要であれば行うが、既に600になっている。</p>

<h2>公開鍵の内容をコピー</h2>

<p>GitHub, Bitbucketに登録する公開鍵の内容をクリップボードにコピーする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pbcopy &lt; ~/.ssh/id_rsa.jd-repository.pub</span></code></pre></td></tr></table></div></figure>


<h2>GitHubに登録</h2>

<p>GitHubにログイン &ndash;> AccountSettings &ndash;> SSH Keys</p>

<ul>
<li>Title：わかりやすいように。jd-mbp15</li>
<li>Key：pbcopyでコピーした内容をペースト（Cmd+v）</li>
<li>Add Key：最後にここを押下</li>
</ul>


<h2>Bitbucketに登録</h2>

<p>Bitbucketにログイン &ndash;> アカウントの管理 &ndash;> SSH キー</p>

<ul>
<li>鍵を追加：押下（モーダルウィンドウが表示される）</li>
<li>Label：わかりやすいように。jd-mbp15</li>
<li>Key：pbcopyでコピーした内容をペースト（Cmd+v）</li>
<li>鍵を追加：最後にここを押下</li>
</ul>


<h2>コンフィグファイル（local）にSSHホスト情報を登録</h2>

<p>Macにある <code>~/.ssh/config</code> にHOST情報を追加する。<br/>
ここに登録しておくと、Terminalからのsshコマンドを簡略化できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -l git -i ~/.ssh/id_rsa.jd-repository github.com
</span><span class='line'>↓
</span><span class='line'>$ ssh github.com</span></code></pre></td></tr></table></div></figure>


<p>登録する内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host github.com
</span><span class='line'>  HostName github.com
</span><span class='line'>  User git
</span><span class='line'>  Port 22
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa.jd-repository
</span><span class='line'>  IdentitiesOnly yes
</span><span class='line'>
</span><span class='line'>Host bitbucket.org
</span><span class='line'>  HostName bitbucket.org
</span><span class='line'>  User git
</span><span class='line'>  Port 22
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa.jd-repository
</span><span class='line'>  IdentitiesOnly yes</span></code></pre></td></tr></table></div></figure>


<p>設定の意味については以下</p>

<ul>
<li>Host：ホスト名</li>
<li>HostName：ホストのアドレス or IP</li>
<li>User：ログインユーザー</li>
<li>Port：使用ポート（デフォルト：22）</li>
<li>IdentityFile：利用する秘密鍵のファイル名</li>
<li>IdentitiesOnly：ファイルに格納された秘密鍵のみを使用</li>
</ul>


<h2>GitHubのリポジトリにアクセスする際は</h2>

<p>GitHubのリポジトリにアクセスする際は注意が必要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git@[HostName]:[Account name]/[Repository name].git
</span><span class='line'>// ここの[HostName]にはConfigに設定したHostNameを指定する</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第３回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-3/"/>
    <updated>2014-02-22T12:27:31+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-3</id>
    <content type="html"><![CDATA[<p>前回のrbenvインストールでRubyインストールの準備が整ったので、Ruby1.9.3-p484をインストールする。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>Rubyのインストールバージョンの確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv install -l
</span><span class='line'>...
</span><span class='line'>  1.9.3-p429
</span><span class='line'>  1.9.3-p448
</span><span class='line'>  1.9.3-p484
</span><span class='line'>  1.9.3-preview1
</span><span class='line'>  1.9.3-rc1</span></code></pre></td></tr></table></div></figure>


<p>今回は、1.9.3-p484をインストールする。</p>

<h2>Rubyのインストール</h2>

<p>単純に、<code>$ rbenv install 1.9.3-p484</code> でもいいが、readlineとopensslを有効にしてRubyをインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ CONFIGURE_OPTS="--with-readline-dir=$(brew --prefix readline) --with-openssl-dir=$(brew --prefix openssl)" rbenv install 1.9.3-p484
</span><span class='line'>...
</span><span class='line'>Downloading yaml-0.1.5.tar.gz...　＞ちょっと時間が掛かる
</span><span class='line'>-&gt; http://dqw8nmjcqpjn7.cloudfront.net/24f6093c1e840ca5df2eb09291a1dbf1
</span><span class='line'>Installing yaml-0.1.5...
</span><span class='line'>Installed yaml-0.1.5 to /Users/JohnDoe/.rbenv/versions/1.9.3-p484
</span><span class='line'>
</span><span class='line'>Downloading ruby-1.9.3-p484.tar.gz...
</span><span class='line'>-&gt; http://dqw8nmjcqpjn7.cloudfront.net/8ac0dee72fe12d75c8b2d0ef5d0c2968
</span><span class='line'>Installing ruby-1.9.3-p484...
</span><span class='line'>Installed ruby-1.9.3-p484 to /Users/JohnDoe/.rbenv/versions/1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<h2>使用するバージョンの切り替え</h2>

<p>1: まずは、現在のRubyバージョンを確認する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]</span></code></pre></td></tr></table></div></figure>


<p>2: どのバージョンを使う設定になっているかを調べる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv version
</span><span class='line'>system (set by /Users/JohnDoe/.rbenv/version)</span></code></pre></td></tr></table></div></figure>


<p>system標準を使用するようになっているのがわかる。</p>

<p>3: 利用可能なバージョンがあるか調べる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv versions
</span><span class='line'>* system (set by /Users/JohnDoe/.rbenv/version)
</span><span class='line'>  1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<p>先ほどインストールした1.9.3-p484の使用も可能。</p>

<p>4: 利用するバージョンを切り替える</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv global 1.9.3-p484
</span><span class='line'>$ rbenv rehash</span></code></pre></td></tr></table></div></figure>


<p>5: 切り替わったかどうか、バージョンを調べる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.2]
</span><span class='line'>$ rbenv version
</span><span class='line'>1.9.3-p484 (set by /Users/JohnDoe/.rbenv/version)</span></code></pre></td></tr></table></div></figure>


<p>1.9.3-p484を使用するようになっていることが確認できる。</p>

<h2>ディレクトリ単位での切り替え</h2>

<p><strong>ここはBitbucketからのclone後に設定。</strong><br/>
1.9.3-p484を使いたいのはOctopressを使うディレクトリでの作業のみだと考えると、そのディレクトリにのみ1.9.3を適用することはできるのだろうか？<br/>
rbenvにディレクトリ単位の切り替え機能はあるのだろうか？<br/>
googleで調べてみたところ、可能みたいな。</p>

<ul>
<li>ユーザ毎に使用するRubyのバージョンを変更できる</li>
<li>プロジェクト毎にRubyのバージョンを指定できる<br/>
.rbenv-versionファイルを読み取って、特定ディレクトリ以下のRubyバージョンを指定できる。</li>
<li>環境変数によってRubyのバージョンを指摘できる<br/>
RBENV_VERSIONを指定しておくと、その環境変数が有効な範囲でだけRubyバージョンを指定できる。</li>
</ul>


<p>２つ目のプロジェクト毎に指定が理想なので、以下を行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Rubyのバージョン指定をしたいディレクトリに移動
</span><span class='line'>$ cd 指定ディレクトリ
</span><span class='line'>$ rbenv local 1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<p>もしくは対象のディレクトリに直接.rbenv-versionというファイルを作成。<br/>
中身は <code>1.9.3-p484</code> と記述。</p>

<p>確認：まずはホームディレクトリ &ndash;> system(2.0.0)の使用になっている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]
</span><span class='line'>$ rbenv version
</span><span class='line'>system (set by /Users/JohnDoe/.rbenv/version)
</span><span class='line'>$ rbenv versions
</span><span class='line'>* system (set by /Users/JohnDoe/.rbenv/version)
</span><span class='line'>  1.9.3-p484</span></code></pre></td></tr></table></div></figure>


<p>確認：対象ディレクトリ &ndash;> 1.9.3の使用になっている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.2]
</span><span class='line'>$ rbenv version
</span><span class='line'>1.9.3-p484 (set by /Users/JohnDoe/mzgk.github.io/.ruby-version)
</span><span class='line'>$ rbenv versions
</span><span class='line'>  system
</span><span class='line'>* 1.9.3-p484 (set by /Users/JohnDoe/mzgk.github.io/.ruby-version)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第２回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-2/"/>
    <updated>2014-02-22T12:18:26+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-2</id>
    <content type="html"><![CDATA[<p>前回はHomebrewのインストールまでだったので、続きから。<br/>
Rubyのバージョン管理を行うrbenvやその他必要モジュールをインストール。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>readline</h2>

<p>Rubyが使用するライブラリで、コマンドラインの１行入力をサポートするライブラリ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install readline
</span><span class='line'>...
</span><span class='line'>LDFLAGS:  -L/usr/local/opt/readline/lib
</span><span class='line'>CPPFLAGS: -I/usr/local/opt/readline/include
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/readline/6.2.4: 31 files, 1.6M</span></code></pre></td></tr></table></div></figure>


<h2>openssl</h2>

<p>Rubyが使用するライブラリ。<br/>
SSL（Secure Socket Layer）は、ネットワーク通信を暗号化するライブラリで、OpenSSLはそのオープンソースの実装。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install openssl
</span><span class='line'>...
</span><span class='line'>    LDFLAGS:  -L/usr/local/opt/openssl/lib
</span><span class='line'>    CPPFLAGS: -I/usr/local/opt/openssl/include
</span><span class='line'>
</span><span class='line'>==&gt; security find-certificate -a -p /Library/Keychains/System.keychain &gt; '/usr/local/etc/openssl/osx_cert.pem.tmp'
</span><span class='line'>==&gt; security find-certificate -a -p /System/Library/Keychains/SystemRootCertificates.keychain &gt;&gt; '/usr/local/etc/openssl/osx_cert.
</span><span class='line'>==&gt; mv -f /usr/local/etc/openssl/osx_cert.pem.tmp /usr/local/etc/openssl/osx_cert.pem
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/openssl/1.0.1f: 429 files, 15M</span></code></pre></td></tr></table></div></figure>


<h2>rbenv</h2>

<p>Rubyのバージョン切り替えを行えるパッケージ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install rbenv
</span><span class='line'>...
</span><span class='line'>==&gt; Caveats
</span><span class='line'>To use Homebrew's directories rather than ~/.rbenv add to your profile:
</span><span class='line'>  export RBENV_ROOT=/usr/local/var/rbenv
</span><span class='line'>
</span><span class='line'>To enable shims and autocompletion add to your profile:
</span><span class='line'>  if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi
</span><span class='line'>==&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/rbenv/0.4.0: 31 files, 152K, built in 2 seconds</span></code></pre></td></tr></table></div></figure>


<h2>.bash_profile</h2>

<p>rbenvをインストール時に表示されたスクリプトを.bash_profileに追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.bash_profile
</span><span class='line'>...
</span><span class='line'>// rbenv(to enable shims and autocompletion)
</span><span class='line'>if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi
</span><span class='line'>...
</span><span class='line'>$ source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<h2>ruby-build</h2>

<p>rbenvを使用してRubyをインストールするためのパッケージ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install ruby-build
</span><span class='line'>...
</span><span class='line'>==&gt; Installing ruby-build
</span><span class='line'>==&gt; Downloading https://github.com/sstephenson/ruby-build/archive/v20140214.tar.gz
</span><span class='line'>######################################################################## 100.0%
</span><span class='line'>==&gt; ./install.sh
</span><span class='line'>🍺  /usr/local/Cellar/ruby-build/20140214: 108 files, 472K, built in 2 seconds</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第１回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-1/"/>
    <updated>2014-02-22T11:27:04+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-1</id>
    <content type="html"><![CDATA[<p>Macを新しくしたので、Octopressブログ環境を再構築する必要がでてきた。<br/>
前のローカル環境はBitbucketで管理しているので $ git clone すればいいが、Rubyその他もろもろのセットアップは必要。<br/>
前のMacではRubyをさわったりで、前準備ができていた状態での構築だったが、今回はゼロからの構築。<br/>
まずは、パッケージ管理のHomebrewをインストールまでが目標。</p>

<ol>
<li>Homebrewのインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>現在の環境</h2>

<ul>
<li>OS X 10.9.1 (Mavericks)</li>
<li>Ruby 2.0.0-p247</li>
<li>git 1.8.3.4 (Apple Git-47)</li>
<li>XCode5</li>
</ul>


<h2>まずは</h2>

<p>Octopressを使いたいので、Ruby1.9.3が必要。<br/>
だけど、今は2.0.0がインストールされている。<br/>
なので、Rubyのインストールが必要。<br/>
それには、Rubyのバージョン管理をしてくれるrbenvが必要。<br/>
じゃあまずは、rbenvをインストールするためにパッケージ管理のHomebrewをインストールしないと。</p>

<h2>Homebrew</h2>

<p>※XCode5はインストール済み（＝Command Line Toolはインストール済み）<br/>
→ここは <strong>大きな間違い。</strong> Xcodeインストールしただけではダメ。自分で別途インストールする必要あり。</p>

<h3>インストールディレクトリの確認</h3>

<ul>
<li><code>$ ls /usr/local</code></li>
<li>無ければ作成</li>
<li><code>$ sudo mkdir /usr/local</code></li>
<li>sudoなしで実行したら、<code>Permission denied</code> が表示される</li>
</ul>


<h3>Homebrewのインストール</h3>

<ul>
<li>まずは<a href="http://brew.sh/index_ja.html">公式サイト</a>を確認</li>
<li>サイトからインストールコマンドをコピーし、Terminalにペーストし実行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Command Line Toolが入っていない…？</li>
<li>Xcodeをインストールしただけで、Command Line Toolはまだインストールされていなかった…</li>
<li>ダイアログが表示されるので、インストールを選択</li>
<li>Command Line Toolがインストールされ、Homebrewのインストールが進んでいく</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; Installation successful!
</span><span class='line'>You should run 'brew doctor' *before* you install anything.
</span><span class='line'>
</span><span class='line'>// brew doctorで確認
</span><span class='line'>$ brew doctor
</span><span class='line'>Your system is ready to brew.
</span><span class='line'>
</span><span class='line'>// バージョンを見る
</span><span class='line'>$ brew --version
</span><span class='line'>0.9.5</span></code></pre></td></tr></table></div></figure>


<h2>パスを通す</h2>

<ul>
<li>ホームディレクトリ直下に.bash_profileと.bashrcを作成する（ない場合）</li>
<li>.bash_profileに以下を記述</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch ~/.bash_profile .bashrc &lt;- 作成
</span><span class='line'>$ vim ~/.bash_profile &lt;- vim起動
</span><span class='line'>...
</span><span class='line'># Terminal起動時は.bash_profile→.bashrcが、シェル切り替え時は.bashrcが単体で読込まれる
</span><span class='line'># なので、以後の設定は.bashrcに記述するとどのような場合でも同じパス設定が読込まれる。
</span><span class='line'>if [-f ~/.bashrc]; then
</span><span class='line'>  . ~/.bashrc
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<ul>
<li>.bashrcに以下を記述</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim ~/.bashrc
</span><span class='line'>...
</span><span class='line'># Homebrew setting
</span><span class='line'># Homebrewでインストールされたモジュールは以下に格納されるので、
</span><span class='line'># TerminalでHomebrewのコマンドを使用できるようにパスを通しておく
</span><span class='line'>PATH=/usr/local/bin:/usr/local/sbin:$PATH
</span><span class='line'>export PATH</span></code></pre></td></tr></table></div></figure>


<ul>
<li>確認<br/>
/usr/local/binが２つでる…。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo $PATH
</span><span class='line'>/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin</span></code></pre></td></tr></table></div></figure>


<ul>
<li>問題発生

<ul>
<li>直そうと思って、.bashrcの記述を変更</li>
<li>そしたら記述を間違ったらしく.bashrcエラーでTerminalからコマンドを受け付けなくなる…</li>
<li>$ vi も $ vim も$ rmも受け付けない。困った…</li>
<li>隠しファイルを表示させようにもコマンドが打てない…</li>
<li>coda2で『ファイルを開く＞下のオプションボタン＞隠しファイルを表示』にチェック</li>
<li>再度開くと隠しファイルが表示されるので、.bashrcを選択して内容を修正</li>
<li>Terminalを再起動させて回復</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでカット＆ペーストをする]]></title>
    <link href="http://mzgk.github.io/blog/2014/finder-cut-and-paste/"/>
    <updated>2014-02-19T21:29:35+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/finder-cut-and-paste</id>
    <content type="html"><![CDATA[<p>Macではカット＆ペーストはできないと思い込んでいたが、実は標準機能で可能だったのでメモ。<br/>
カット＆ペーストのためだけに、『XtraFinder』などのアプリをインストールする必要もなかった…<br/>
Windowsに慣れていると、ついついMacでもカット＆ペーストを <code>Cmd+x Cmd+v</code> としてしまうが、Macではちょっと勝手が違う。</p>

<!-- more -->


<h2>正確にはコピー＆ムーブ</h2>

<p>ショートカットキーは以下。<br/>
<code>Cmd + c</code> でコピー<br/>
<code>Cmd + Opt + v</code> でムーブ<br/>
これで、カット＆ペーストが可能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressでGoogle Fontsを使う]]></title>
    <link href="http://mzgk.github.io/blog/2014/octopress-googlefont/"/>
    <updated>2014-02-18T22:13:54+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/octopress-googlefont</id>
    <content type="html"><![CDATA[<p>OctopressでGoogle Fontsを使えるようにして、気に入ったフォントで表示したい。<br/>
そして、ブラウザ間でフォントを統一したい。<br/>
その設定方法を調べたのでメモ。</p>

<!-- more -->


<h2>Google Font</h2>

<p>まず、 <a href="http://www.google.com/fonts">Google Font</a> にアクセスする。</p>

<p>使いたいフォントを選ぶ。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_1.png" alt="フォントを選ぶ" /></p>

<p>複数選択し、比較も可能。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_2.png" alt="フォントを比較" /></p>

<p>使うフォントの表示速度を確認。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_3.png" alt="フォント確認" /></p>

<p>埋め込むコードをコピー。<br/>
<img src="http://mzgk.github.io/images/2014/0204/googlefont_4.png" alt="コードを取得" /></p>

<h2>Octopressに設定</h2>

<p>Octopressの以下のファイルに取得したコードをペーストする。<br/>
<strong>source/_includes/custom/head.html</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 取得したコード
</span><span class='line'>&lt;link href="http://mzgk.github.io//fonts.googleapis.com/css?family=Monda:400,700" rel="stylesheet" type="text/css"&gt;</span></code></pre></td></tr></table></div></figure>


<h2>CSSに使用</h2>

<p>フォントを定義するSCSSファイルに定義する。<br/>
<strong>sass/custom/_fonts.scss</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Mondaを追加
</span><span class='line'>$sans: "Monda", "HiraMaruPro-W4", Arial, sans-serif;</span></code></pre></td></tr></table></div></figure>


<h2>Generate &amp; Deploy</h2>

<p>あとは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>...
</span><span class='line'>$ rake deploy
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>

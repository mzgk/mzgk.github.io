<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Setting | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/setting/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-05T19:08:07+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第５回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-5/"/>
    <updated>2014-02-22T12:44:01+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-5</id>
    <content type="html"><![CDATA[<p>Bitbucketで管理しているOctopressブログ環境を取得し、ローカルに再構築する。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）　&lt;&ndash; <strong>いまここ</strong></li>
</ol>


<!-- more -->


<h2>手順</h2>

<ol>
<li>Octopressブログ環境の取得（Bitbucketから）</li>
<li>bundlerのインストール</li>
<li>GitHubとOctopressを繋げる</li>
<li>GitHubリポジトリ（mzgk.github.io）の削除／再作成（他に解決法はあると思う）</li>
<li>記事作成 &ndash;> デプロイ</li>
<li>Octopressブログ環境を管理（Bitbucket）</li>
</ol>


<h2>1. Octopressブログ環境の取得</h2>

<p>BitbucketのリポジトリでOctopressローカル環境を管理していたので、$ git clone でローカルにファイルを取得する。<br/>
Terminalを起動し、ディレクトリを作成したい場所まで移動。<br/>
<code>
$ git clone git@bitbucket.org:mzgk/mzgk.github.io.git
...
Checking connectivity... done
</code>
これでローカルにmzgk.github.ioディレクトリが作成され、ブログ環境一式が取得できる。</p>

<h2>2. bundlerインストール</h2>

<p>予想していなかったが、bundlerのインストールが必要だった。<br/>
テーマは既にあるので <code>$ rake install</code> は不要。<br/>
<code>
// Octopress環境のディレクトリに移動して
$ gem install bundler
...
Installing RDoc documentation for bundler-1.5.3...
$ rbenv rehash
$ bundle install
...
Your bundle is complete!
</code></p>

<h2>3. GitHubとOctopressを繋げる</h2>

<p>これも予想していなかったが、ローカルとGitHub Pagesの接続が必要。<br/>
```
// Octopress環境のディレクトリに移動して
$ rake setup_github_pages
&hellip;
Repository url:ここにGitHubリポジトリの「SSH clone URL」をペースト
&hellip;</p>

<h2>Now you can deploy to git@&hellip;</h2>

<p>```</p>

<h2>4. GitHubリポジトリ（mzgk.github.io）の削除／再作成（※※解決法あり）</h2>

<p>なぜか、<code>$rake deploy</code> でエラーが発生して失敗する。<br/>
```</p>

<h2>Pushing generated _deploy website</h2>

<p>To git@github.com:mzgk/mzgk.github.io.git
 ! [rejected]        master &ndash;> master (non-fast-forward)
error: failed to push some refs to &lsquo;git@github.com:mzgk/mzgk.github.io.git&rsquo;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. &lsquo;git pull&rsquo;)
hint: before pushing again.
hint: See the &lsquo;Note about fast-forwards&rsquo; in &lsquo;git push &mdash;help&rsquo; for details.
```
よくわからず…（-fの方法は？）<br/>
コンフリクトしているみたいなので、デプロイ先のGitHubのリポジトリを消してみる。<br/>
再度、$ rake deployでうまくいく。</p>

<p>※※<br/>
Rakefileを以下のように変更してdeployすると大丈夫だとのこと（今回は試してはいない）。<br/>
L264行目あたり<br/>
<code>
system "git push origin #{deploy_branch}"
↓
system "git push origin +#{deploy_branch}"
</code></p>

<h2>5. 記事作成->デプロイ</h2>

<p>あとはいつも通りの流れ。<br/>
<code>
// ポストファイル作成（source/_postsにyyyy-mm-dd-title.markdown）
$ rake new_post["title"]
// 記事を書いて
// 生成
$ rake generate
// プレビュー（localhost:4000）
$ rake preview
// デプロイ
$ rake deploy
</code></p>

<h2>6. Octopressブログ環境を管理（Bitbucket）</h2>

<p>ローカル環境をリモートリポジトリBitbucketにPUSHして管理。<br/>
<code>
$ git add .
$ git commit -m "コメント"
// リモートリポジトリを追加
$ git remote add bitbucket git@bitbucket.org:mzgk/mzgk.github.io.git
// リモートリポジトリにPush（以後は$ git pushのみで可）
$ git push -u bitbucket source
</code></p>

<h2>以上</h2>

<p>以上で、無事に終了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第４回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-4/"/>
    <updated>2014-02-22T12:38:07+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-4</id>
    <content type="html"><![CDATA[<p>Macも新しくなったので、SSH鍵の設定をあらためて実施。<br/>
GitHub, Biubucketに対して行う。<br/>
別々の鍵ファイルを用意した方がいいのかもしれないが、今回は一つのファイルでやってみる。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）　&lt;&ndash; <strong>いまここ</strong></li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>方針</h2>

<ul>
<li>一つの鍵ファイルをGitHubとBitbucketに使用する</li>
<li>ファイル名（-f）をつける（誤って上書きしないように）<br/>
id_rsa.jd-repository</li>
<li>コメント（-C）は、ユーザ名@マシン名<br/>
JohnDoe@jd-mbp15</li>
<li>パスフレーズなし</li>
</ul>


<h2>鍵の作成</h2>

<p><code>
$ cd ~/.ssh
No such file or directory
$ mkdir .ssh
$ cd .ssh
$ ssh-keygen -t rsa -C "JohnDoe@jd-mbp15"
Enter file in witch to save the key: id_rsa.jd-repository &lt;-ここでファイル名をつける
...
+--[ RSA 2048]----+
...
</code>
ssh-keygenコマンドのオプションの内容は以下。<br/>
-t：鍵の種類<br/>
-b：ビット数（デフォルト2048なので指定不要）<br/>
-C：コメント</p>

<h2>ファイル生成確認</h2>

<p>生成されたかを確認する。<br/>
id_rsa.repository：秘密鍵<br/>
id_rsa.repository.pub：公開鍵</p>

<p><code>
$ ls -la
-rw-------   1 JohnDoe  staff  1675  2 16 17:03 id_rsa.jd-repository
-rw-r--r--   1 JohnDoe  staff   396  2 16 17:03 id_rsa.jd-repository.pub
</code></p>

<h2>ファイルのパーミッションを変更</h2>

<p><code>
$ chmod 600 id_rsa.jd-repository
</code>
必要であれば行うが、既に600になっている。</p>

<h2>公開鍵の内容をコピー</h2>

<p>GitHub, Bitbucketに登録する公開鍵の内容をクリップボードにコピーする。
<code>
$ pbcopy &lt; ~/.ssh/id_rsa.jd-repository.pub
</code></p>

<h2>GitHubに登録</h2>

<p>GitHubにログイン &ndash;> AccountSettings &ndash;> SSH Keys</p>

<ul>
<li>Title：わかりやすいように。jd-mbp15</li>
<li>Key：pbcopyでコピーした内容をペースト（Cmd+v）</li>
<li>Add Key：最後にここを押下</li>
</ul>


<h2>Bitbucketに登録</h2>

<p>Bitbucketにログイン &ndash;> アカウントの管理 &ndash;> SSH キー</p>

<ul>
<li>鍵を追加：押下（モーダルウィンドウが表示される）</li>
<li>Label：わかりやすいように。jd-mbp15</li>
<li>Key：pbcopyでコピーした内容をペースト（Cmd+v）</li>
<li>鍵を追加：最後にここを押下</li>
</ul>


<h2>コンフィグファイル（local）にSSHホスト情報を登録</h2>

<p>Macにある <code>~/.ssh/config</code> にHOST情報を追加する。<br/>
ここに登録しておくと、Terminalからのsshコマンドを簡略化できる。<br/>
<code>
$ ssh -l git -i ~/.ssh/id_rsa.jd-repository github.com
↓
$ ssh github.com
</code></p>

<p>登録する内容は以下。
```
Host github.com
  HostName github.com
  User git
  Port 22
  IdentityFile ~/.ssh/id_rsa.jd-repository
  IdentitiesOnly yes</p>

<p>Host bitbucket.org
  HostName bitbucket.org
  User git
  Port 22
  IdentityFile ~/.ssh/id_rsa.jd-repository
  IdentitiesOnly yes
```
設定の意味については以下</p>

<ul>
<li>Host：ホスト名</li>
<li>HostName：ホストのアドレス or IP</li>
<li>User：ログインユーザー</li>
<li>Port：使用ポート（デフォルト：22）</li>
<li>IdentityFile：利用する秘密鍵のファイル名</li>
<li>IdentitiesOnly：ファイルに格納された秘密鍵のみを使用</li>
</ul>


<h2>GitHubのリポジトリにアクセスする際は</h2>

<p>GitHubのリポジトリにアクセスする際は注意が必要。<br/>
<code>
$ git@[HostName]:[Account name]/[Repository name].git
// ここの[HostName]にはConfigに設定したHostNameを指定する
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第３回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-3/"/>
    <updated>2014-02-22T12:27:31+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-3</id>
    <content type="html"><![CDATA[<p>前回のrbenvインストールでRubyインストールの準備が整ったので、Ruby1.9.3-p484をインストールする。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>Rubyのインストールバージョンの確認</h2>

<p><code>
$ rbenv install -l
...
  1.9.3-p429
  1.9.3-p448
  1.9.3-p484
  1.9.3-preview1
  1.9.3-rc1
</code>
今回は、1.9.3-p484をインストールする。</p>

<h2>Rubyのインストール</h2>

<p>単純に、<code>$ rbenv install 1.9.3-p484</code> でもいいが、readlineとopensslを有効にしてRubyをインストールする。<br/>
```
$ CONFIGURE_OPTS=&ldquo;&mdash;with-readline-dir=$(brew &mdash;prefix readline) &mdash;with-openssl-dir=$(brew &mdash;prefix openssl)&rdquo; rbenv install 1.9.3-p484
&hellip;
Downloading yaml-0.1.5.tar.gz&hellip;　＞ちょっと時間が掛かる
&ndash;> <a href="http://dqw8nmjcqpjn7.cloudfront.net/24f6093c1e840ca5df2eb09291a1dbf1">http://dqw8nmjcqpjn7.cloudfront.net/24f6093c1e840ca5df2eb09291a1dbf1</a>
Installing yaml-0.1.5&hellip;
Installed yaml-0.1.5 to /Users/JohnDoe/.rbenv/versions/1.9.3-p484</p>

<p>Downloading ruby-1.9.3-p484.tar.gz&hellip;
&ndash;> <a href="http://dqw8nmjcqpjn7.cloudfront.net/8ac0dee72fe12d75c8b2d0ef5d0c2968">http://dqw8nmjcqpjn7.cloudfront.net/8ac0dee72fe12d75c8b2d0ef5d0c2968</a>
Installing ruby-1.9.3-p484&hellip;
Installed ruby-1.9.3-p484 to /Users/JohnDoe/.rbenv/versions/1.9.3-p484
```</p>

<h2>使用するバージョンの切り替え</h2>

<p>1: まずは、現在のRubyバージョンを確認する
<code>
$ ruby -v
ruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]
</code></p>

<p>2: どのバージョンを使う設定になっているかを調べる
<code>
$ rbenv version
system (set by /Users/JohnDoe/.rbenv/version)
</code>
system標準を使用するようになっているのがわかる。</p>

<p>3: 利用可能なバージョンがあるか調べる
<code>
$ rbenv versions
* system (set by /Users/JohnDoe/.rbenv/version)
  1.9.3-p484
</code>
先ほどインストールした1.9.3-p484の使用も可能。</p>

<p>4: 利用するバージョンを切り替える
<code>
$ rbenv global 1.9.3-p484
$ rbenv rehash
</code></p>

<p>5: 切り替わったかどうか、バージョンを調べる
<code>
$ ruby -v
ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.2]
$ rbenv version
1.9.3-p484 (set by /Users/JohnDoe/.rbenv/version)
</code>
1.9.3-p484を使用するようになっていることが確認できる。</p>

<h2>ディレクトリ単位での切り替え</h2>

<p><strong>ここはBitbucketからのclone後に設定。</strong><br/>
1.9.3-p484を使いたいのはOctopressを使うディレクトリでの作業のみだと考えると、そのディレクトリにのみ1.9.3を適用することはできるのだろうか？<br/>
rbenvにディレクトリ単位の切り替え機能はあるのだろうか？<br/>
googleで調べてみたところ、可能みたいな。</p>

<ul>
<li>ユーザ毎に使用するRubyのバージョンを変更できる</li>
<li>プロジェクト毎にRubyのバージョンを指定できる<br/>
.rbenv-versionファイルを読み取って、特定ディレクトリ以下のRubyバージョンを指定できる。</li>
<li>環境変数によってRubyのバージョンを指摘できる<br/>
RBENV_VERSIONを指定しておくと、その環境変数が有効な範囲でだけRubyバージョンを指定できる。</li>
</ul>


<p>２つ目のプロジェクト毎に指定が理想なので、以下を行う。<br/>
<code>
// Rubyのバージョン指定をしたいディレクトリに移動
$ cd 指定ディレクトリ
$ rbenv local 1.9.3-p484
</code></p>

<p>もしくは対象のディレクトリに直接.rbenv-versionというファイルを作成。<br/>
中身は <code>1.9.3-p484</code> と記述。</p>

<p>確認：まずはホームディレクトリ &ndash;> system(2.0.0)の使用になっている<br/>
<code>
$ ruby -v
ruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]
$ rbenv version
system (set by /Users/JohnDoe/.rbenv/version)
$ rbenv versions
* system (set by /Users/JohnDoe/.rbenv/version)
  1.9.3-p484
</code></p>

<p>確認：対象ディレクトリ &ndash;> 1.9.3の使用になっている<br/>
<code>
$ ruby -v
ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.2]
$ rbenv version
1.9.3-p484 (set by /Users/JohnDoe/mzgk.github.io/.ruby-version)
$ rbenv versions
  system
* 1.9.3-p484 (set by /Users/JohnDoe/mzgk.github.io/.ruby-version)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第２回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-2/"/>
    <updated>2014-02-22T12:18:26+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-2</id>
    <content type="html"><![CDATA[<p>前回はHomebrewのインストールまでだったので、続きから。<br/>
Rubyのバージョン管理を行うrbenvやその他必要モジュールをインストール。</p>

<ol>
<li>Homebrewのインストール</li>
<li>rbenvのインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>readline</h2>

<p>Rubyが使用するライブラリで、コマンドラインの１行入力をサポートするライブラリ。<br/>
<code>
$ brew install readline
...
LDFLAGS:  -L/usr/local/opt/readline/lib
CPPFLAGS: -I/usr/local/opt/readline/include
==&gt; Summary
🍺  /usr/local/Cellar/readline/6.2.4: 31 files, 1.6M
</code></p>

<h2>openssl</h2>

<p>Rubyが使用するライブラリ。<br/>
SSL（Secure Socket Layer）は、ネットワーク通信を暗号化するライブラリで、OpenSSLはそのオープンソースの実装。
```
$ brew install openssl
&hellip;</p>

<pre><code>LDFLAGS:  -L/usr/local/opt/openssl/lib
CPPFLAGS: -I/usr/local/opt/openssl/include
</code></pre>

<p>==> security find-certificate -a -p /Library/Keychains/System.keychain > &lsquo;/usr/local/etc/openssl/osx_cert.pem.tmp&rsquo;
==> security find-certificate -a -p /System/Library/Keychains/SystemRootCertificates.keychain >> &lsquo;/usr/local/etc/openssl/osx_cert.
==> mv -f /usr/local/etc/openssl/osx_cert.pem.tmp /usr/local/etc/openssl/osx_cert.pem
==> Summary
🍺  /usr/local/Cellar/openssl/1.0.1f: 429 files, 15M
```</p>

<h2>rbenv</h2>

<p>Rubyのバージョン切り替えを行えるパッケージ。
```
$ brew install rbenv
&hellip;
==> Caveats
To use Homebrew&rsquo;s directories rather than ~/.rbenv add to your profile:
  export RBENV_ROOT=/usr/local/var/rbenv</p>

<p>To enable shims and autocompletion add to your profile:
  if which rbenv > /dev/null; then eval &ldquo;$(rbenv init &ndash;)&rdquo;; fi
==> Summary
🍺  /usr/local/Cellar/rbenv/0.4.0: 31 files, 152K, built in 2 seconds
```</p>

<h2>.bash_profile</h2>

<p>rbenvをインストール時に表示されたスクリプトを.bash_profileに追加。
<code>
$ vim ~/.bash_profile
...
// rbenv(to enable shims and autocompletion)
if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi
...
$ source ~/.bash_profile
</code></p>

<h2>ruby-build</h2>

<p>rbenvを使用してRubyをインストールするためのパッケージ。
```
$ brew install ruby-build
&hellip;
==> Installing ruby-build
==> Downloading <a href="https://github.com/sstephenson/ruby-build/archive/v20140214.tar.gz">https://github.com/sstephenson/ruby-build/archive/v20140214.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> ./install.sh
🍺  /usr/local/Cellar/ruby-build/20140214: 108 files, 472K, built in 2 seconds
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressブログ環境の再構築：第１回]]></title>
    <link href="http://mzgk.github.io/blog/2014/restart-octopress-1/"/>
    <updated>2014-02-22T11:27:04+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restart-octopress-1</id>
    <content type="html"><![CDATA[<p>Macを新しくしたので、Octopressブログ環境を再構築する必要がでてきた。<br/>
前のローカル環境はBitbucketで管理しているので $ git clone すればいいが、Rubyその他もろもろのセットアップは必要。<br/>
前のMacではRubyをさわったりで、前準備ができていた状態での構築だったが、今回はゼロからの構築。<br/>
まずは、パッケージ管理のHomebrewをインストールまでが目標。</p>

<ol>
<li>Homebrewのインストール　&lt;&ndash; <strong>いまここ</strong></li>
<li>rbenvのインストール</li>
<li>Ruby1.9.3のインストール</li>
<li>SSH鍵の設定（GitHub, Bitbucket）</li>
<li>Octopressブログ環境の構築（From Bitbucket）</li>
</ol>


<!-- more -->


<h2>現在の環境</h2>

<ul>
<li>OS X 10.9.1 (Mavericks)</li>
<li>Ruby 2.0.0-p247</li>
<li>git 1.8.3.4 (Apple Git-47)</li>
<li>XCode5</li>
</ul>


<h2>まずは</h2>

<p>Octopressを使いたいので、Ruby1.9.3が必要。<br/>
だけど、今は2.0.0がインストールされている。<br/>
なので、Rubyのインストールが必要。<br/>
それには、Rubyのバージョン管理をしてくれるrbenvが必要。<br/>
じゃあまずは、rbenvをインストールするためにパッケージ管理のHomebrewをインストールしないと。</p>

<h2>Homebrew</h2>

<p>※XCode5はインストール済み（＝Command Line Toolはインストール済み）<br/>
→ここは <strong>大きな間違い。</strong> Xcodeインストールしただけではダメ。自分で別途インストールする必要あり。</p>

<h3>インストールディレクトリの確認</h3>

<ul>
<li><code>$ ls /usr/local</code></li>
<li>無ければ作成</li>
<li><code>$ sudo mkdir /usr/local</code></li>
<li>sudoなしで実行したら、<code>Permission denied</code> が表示される</li>
</ul>


<h3>Homebrewのインストール</h3>

<ul>
<li>まずは<a href="http://brew.sh/index_ja.html">公式サイト</a>を確認</li>
<li>サイトからインストールコマンドをコピーし、Terminalにペーストし実行</li>
</ul>


<p>```</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></pre>

<p>```</p>

<ul>
<li>Command Line Toolが入っていない…？</li>
<li>Xcodeをインストールしただけで、Command Line Toolはまだインストールされていなかった…</li>
<li>ダイアログが表示されるので、インストールを選択</li>
<li>Command Line Toolがインストールされ、Homebrewのインストールが進んでいく</li>
</ul>


<p>```</p>

<pre><code>==&gt; Installation successful!
You should run 'brew doctor' *before* you install anything.

// brew doctorで確認
$ brew doctor
Your system is ready to brew.

// バージョンを見る
$ brew --version
0.9.5
</code></pre>

<p>```</p>

<h2>パスを通す</h2>

<ul>
<li>ホームディレクトリ直下に.bash_profileと.bashrcを作成する（ない場合）</li>
<li>.bash_profileに以下を記述</li>
</ul>


<p>```
$ touch ~/.bash_profile .bashrc &lt;&ndash; 作成
$ vim ~/.bash_profile &lt;&ndash; vim起動
&hellip;</p>

<h1>Terminal起動時は.bash_profile→.bashrcが、シェル切り替え時は.bashrcが単体で読込まれる</h1>

<h1>なので、以後の設定は.bashrcに記述するとどのような場合でも同じパス設定が読込まれる。</h1>

<p>if [-f ~/.bashrc]; then
  . ~/.bashrc
fi
```</p>

<ul>
<li>.bashrcに以下を記述</li>
</ul>


<p>```
$ vim ~/.bashrc
&hellip;</p>

<h1>Homebrew setting</h1>

<h1>Homebrewでインストールされたモジュールは以下に格納されるので、</h1>

<h1>TerminalでHomebrewのコマンドを使用できるようにパスを通しておく</h1>

<p>PATH=/usr/local/bin:/usr/local/sbin:$PATH
export PATH
```</p>

<ul>
<li>確認<br/>
/usr/local/binが２つでる…。</li>
</ul>


<p><code>
$ echo $PATH
/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
</code></p>

<ul>
<li>問題発生

<ul>
<li>直そうと思って、.bashrcの記述を変更</li>
<li>そしたら記述を間違ったらしく.bashrcエラーでTerminalからコマンドを受け付けなくなる…</li>
<li>$ vi も $ vim も$ rmも受け付けない。困った…</li>
<li>隠しファイルを表示させようにもコマンドが打てない…</li>
<li>coda2で『ファイルを開く＞下のオプションボタン＞隠しファイルを表示』にチェック</li>
<li>再度開くと隠しファイルが表示されるので、.bashrcを選択して内容を修正</li>
<li>Terminalを再起動させて回復</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>

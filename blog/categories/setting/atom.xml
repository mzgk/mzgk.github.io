<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Setting | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/setting/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-09-02T11:11:52+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MarkdownPreviewで独自CSSを設定する]]></title>
    <link href="http://mzgk.github.io/blog/2014/sublimetext-markdownpreview-css-hack/"/>
    <updated>2014-02-02T10:21:24+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/sublimetext-markdownpreview-css-hack</id>
    <content type="html"><![CDATA[<p>Sublime Text3の便利なPackage、Markdownで記述したファイルをPreviewできる『Markdown Preview』。<br/>
GitHub flavoredも適用できるが、独自CSSをあてたかった。<br/>
どこで設定できるのか探してたところ・・・</p>

<!-- more -->


<h2>Package Settingsがある</h2>

<p>Preferencesには <strong>Package Settings</strong> がある。<br/>
まずは、Markdown PreviewのDefaultの内容を覗いて見ると、それらしき個所が・・・。
```
/*
  Sets the default css file to embed in the HTML</p>

<p>  default &ndash; Use the builtin CSS or github CSS, depending on parser config (markdown.css or github.css)
  other &ndash; Set an absolute path or url to any css file
*/
&ldquo;css&rdquo;: &ldquo;default&rdquo;,
<code>``
なるほど。  
</code>other &ndash; Set an absolute path or url to any css file` の部分が鍵で、絶対パスで指定しろと。</p>

<h2>User用のSetting</h2>

<p><strong>Preferences > Package Settings > Markdown Preview > Settings-User</strong><br/>
で表示されたファイルに以下を記述し保存。
<code>
{
  "css": "CSSファイルの絶対パス",
}
※Windowsの場合、パスの\は/に置き換えて絶対パスを書く。
</code>
注意するのは、Windowsの場合に <strong>『パスの\（&yen;）は/に置き換えて』</strong> 記述すること。</p>

<h2>自分のやった手順</h2>

<p>自分は、フォント周りを変えたかったので、<br/>
1. chromeで表示されたPreview結果を <strong>右クリック > 要素を検証</strong> で開発ツールを表示<br/>
2. <code>&lt;style&gt;...&lt;/style&gt;</code> のCSS定義をコピー<br/>
3. 自分のCSSファイルに貼付ける<br/>
4. 変更・追加を加える<br/>
5. 任意の場所に保存<br/>
6. その絶対パスを指定<br/>
これで、独自のCSSでプレビューできる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DayOne.appで自分の好きなフォントとレイアウトを使用する]]></title>
    <link href="http://mzgk.github.io/blog/2014/dayone-font-setting/"/>
    <updated>2014-01-23T08:18:06+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/dayone-font-setting</id>
    <content type="html"><![CDATA[<p>MacのDayOne.appを自分好みのフォント・レイアウトで使う方法。<br/>
このDayOneっていうジャーナルアプリ、iOSと連携しているしUXもいいしmarkdownも使えるしで、作業ログや日誌をつけるのによく使ってた。<br/>
だけど、選択できるフォントが少ない＆和文フォントは選択できない。<br/>
表示レイアウトも微妙・・・<br/>
なので、いつの日からかあまり使わなくなって放置ぎみ。<br/>
けど、ログが残ってないと過去に何をしたか、明日は何をやるつもりだったかわからない。</p>

<p><code>
過去の自分 ≠ 今の自分
</code></p>

<p>なので、フォントとレイアウトを自分好みに設定できないか調べてみた。<br/>
こんな感じ。<br/>
<img src="/images/2014/0123/dayone.png" alt="Day One" /></p>

<!-- more -->


<h2>設定方法</h2>

<p>なんと、CSSで設定可能。<br/>
方法は以下。あとパーミッションの関係で途中にパスワード入力が必要になるかも。</p>

<ol>
<li>Finder > アプリケーションでDay One.appを選択</li>
<li>右クリック > パッケージの内容を表示</li>
<li><code>Application/Day One.app/Contents/Resources/</code> に移動する</li>
<li><code>DayOne-フォント名.css</code>（設定で指定しているフォント名）をデスクトップにコピー</li>
<li>元ファイルをリネーム</li>
<li>コピーしたファイルにCSSでフォントや文字間隔・行間隔など記述</li>
<li>元あったところに戻す</li>
<li>DayOneを再起動</li>
</ol>


<h2>ファイル</h2>

<p><code>DayOne-フォント名.css</code> には基本的にfont-familyのみが定義されている。<br/>
基本レイアウトなんかは、同じ場所にある <code>Dayone.css</code> に定義されている。<br/>
<code>DayOne-フォント名.css</code> にレイアウト等の記載をすることで、Dayone.cssの定義が上書き適用されるみたい。</p>

<h2>似たようなことは</h2>

<p>似たようなことは、GeekなエディタのFoldingText.appでもできる。<br/>
Macアプリのスタンダード仕様なんだろうか。<br/>
アプリの中に設定ファイルがあるパッケージ構成（アプリ≒ディレクトリ）ってWindowsに慣れていると合理的な感じがする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText3 設定２ PackageContorl]]></title>
    <link href="http://mzgk.github.io/blog/2014/sublimetext-settings-2/"/>
    <updated>2014-01-07T06:08:57+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/sublimetext-settings-2</id>
    <content type="html"><![CDATA[<p>Sublime Text 3の設定について（Mac）。</p>

<ul>
<li>Package Controlの手動インストールの方法</li>
<li>GitHub FlavoredでのMarkdown Previewの方法</li>
</ul>


<!-- more -->


<h2>Package Controlの手動インストール</h2>

<p>職場等でのネットワーク環境の関係で、通常インストールが使用できない場合には自分でダウンロードして設定する必要がある。<br/>
方法は <a href="https://sublime.wbond.net/installation#Manual_Instructions">ここ（英語）</a> に記載してある。<br/>
要約すると、</p>

<ol>
<li>MenuBar : Preferences > Browse Packages&hellip; をクリック</li>
<li><code>~/Liblary/Application Support/Packages</code> が表示される（確認のため）</li>
<li><code>~/Liblary/Application Support/Install Packages</code> を開く</li>
<li><a href="https://sublime.wbond.net/installation#Manual_Instructions">ここ（英語）</a> から<code>Package Control.sublime-package</code>をダウンロード</li>
<li>3で開いた <code>~/Liblary/Application Support/Install Packages</code> ディレクトリに保存</li>
<li>Sublime Text 3を再起動</li>
</ol>


<h2>Markdown Preview(GitHub Flavored)の設定方法</h2>

<p>Markdown記法で入力しているファイルをブラウザでプレビューする方法。<br/>
GitHub Flavoredでプレビューできる。</p>

<ol>
<li>Package Control > Install Package > Markdown Preview</li>
<li>MenuBar : Preferences > KeyBind(User) をクリック</li>
<li><code>opt + m</code> で起動するようにショートカットキーを登録する</li>
</ol>


<p><code>
// "parser"を"github"とすると、GitHub Flavoredでのプレビューとなる
[
{ "keys": ["alt+m"], "command": "markdown_preview", "args": {"target": "browser", "parser": "github"} },
]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText3 設定１ キーバインド設定]]></title>
    <link href="http://mzgk.github.io/blog/2014/sublimetext-settings-1/"/>
    <updated>2014-01-03T08:29:34+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/sublimetext-settings-1</id>
    <content type="html"><![CDATA[<p>Sublime Text3を使いはじめたので、その際の設定について。<br/>
Tabキーでの日本語予測変換の設定。<br/>
F7でのカタカナ変換の設定。<br/>
このエディタはvimモードが使えたり、設定を自分でいじれたりで心地がいい。<br/>
行間の設定ができるのはうれしい限り。</p>

<h2>キーバインドの変更の準備</h2>

<ol>
<li>メニューバー → Preferences → KeyBind(Default)からファイルを開く</li>
<li>内容をすべてコピー</li>
<li>新規ファイルを作成し、ペースト</li>
<li>名前をつけて保存<br/>
ファイル名：<code>Default (OSX).sublime-keymap</code><br/>
パス：<code>~/Library/Application Support/Sublime Text 3/Packages/Default/</code><br/>
Defaultディレクトリが存在しない場合は作成。</li>
</ol>


<!-- more -->


<h2>F7でカタカナ変換の方法</h2>

<p>保存したファイルを開いて、以下をコメントアウト（行頭に//）。<br/>
<code>
{ "keys": ["f7"], "command": "build" },  
</code></p>

<h2>Tabで予測変換確定</h2>

<p>以下をコメントアウト（行頭に//）。<br/>
```<br/>
{ &ldquo;keys&rdquo;: [&ldquo;tab&rdquo;], &ldquo;command&rdquo;: &ldquo;insert_best_completion&rdquo;, &ldquo;args&rdquo;: {&ldquo;default&rdquo;: &ldquo;\t&rdquo;, &ldquo;exact&rdquo;: true} },
{ &ldquo;keys&rdquo;: [&ldquo;tab&rdquo;], &ldquo;command&rdquo;: &ldquo;insert_best_completion&rdquo;, &ldquo;args&rdquo;: {&ldquo;default&rdquo;: &ldquo;\t&rdquo;, &ldquo;exact&rdquo;: false},</p>

<pre><code>"context":
[
  { "key": "setting.tab_completion", "operator": "equal", "operand": true }
]
</code></pre>

<p>},
```</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-09-05T12:04:51+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Homebrewでgitをインストールする]]></title>
    <link href="http://mzgk.github.io/blog/2014/install-git-by-homebrew/"/>
    <updated>2014-08-29T13:35:54+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/install-git-by-homebrew</id>
    <content type="html"><![CDATA[<p>Homebrewで最新のgitをインストールする。</p>

<!-- more -->


<h2>環境</h2>

<ul>
<li>OS X 10.9.2</li>
<li>Homebrewインストール済み</li>
<li>Macのデフォルトgit version 1.8.5.2(Apple Git-48)</li>
</ul>


<h2>gitをインストール</h2>

<p>```bash Terminal.app
// Terminalを起動し、現在のgit versionを確認
$ git &mdash;version
git version 1.8.5.2(Apple Git-48)</p>

<p>// Homebrewで最新をインストールする
$ brew install git
&hellip;
==> Summary
/usr/local/Cellar/git/1.9.2: 1324 files, 31M</p>

<p>// インストールしたバージョンを確認
$ /usr/local/bin/git &mdash;version
git version 1.9.2
```</p>

<h2>Homebrewでインストールしたgitを使用する</h2>

<p>Homebrewでインストールしたgitを使用するように設定する。<br/>
/etc/pathsの順番で、/usr/local/binが一番上にくるようにする。</p>

<p><code>bash Terminal.app
$ vi /etc/paths
↓
/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
</code></p>

<h2>バージョンを確認する</h2>

<p>切り替わったかを確認する。</p>

<p><code>bash Terminal.app
$ git --version
git version 1.9.2
</code></p>

<h2>参考</h2>

<p><a href="http://blog.glidenote.com/blog/2014/04/20/change-command-path-priority/">http://blog.glidenote.com/blog/2014/04/20/change-command-path-priority/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitignoreをあとから適用する]]></title>
    <link href="http://mzgk.github.io/blog/2014/gitignore-apply-after-add/"/>
    <updated>2014-08-28T10:44:36+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/gitignore-apply-after-add</id>
    <content type="html"><![CDATA[<p>.gitignoreファイルはgit管理対象外とするディレクトリ・ファイルを登録するファイルだが、すでに管理対象として登録されたものに対しては無視される。<br/>
すでに管理対象となっているものを、後から.gitginoreに登録し適用させる方法。</p>

<h2>例：draftsディレクトリを対象外としたい</h2>

<p>下書きディレクトリとして <code>draftsディレクトリ</code> を管理対象としていたが、DropBoxで運用したいのでGit管理からは外したい。</p>

<h3>.gitignoreに追記</h3>

<p>```</p>

<h1>ディレクトリの最後に「/（スラッシュ）」をつける</h1>

<p>drafts/
```</p>

<h3>ターミナル</h3>

<p>```
// &mdash;cachedをつけることで、ファイル自体はローカルから削除しない
$ git rm &mdash;cached -r drafts/</p>

<p>// ちなみにファイルの場合は以下
$ git rm &mdash;cached A.txt</p>

<p>// ローカルからファイルも削除する場合は以下
$ git rm A.txt
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git コミットのメッセージ書き方]]></title>
    <link href="http://mzgk.github.io/blog/2014/git-commit-message/"/>
    <updated>2014-08-28T09:51:50+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/git-commit-message</id>
    <content type="html"><![CDATA[<p>Gitではコミットメッセージの形式に関して制約はないが、標準的な形式は以下となる。</p>

<ul>
<li>１行目にコミットの全体的説明を５０字以内で記述</li>
<li>２行目は空行</li>
<li>３行目以降に変更内容の詳細を記述</li>
<li>現在形で記述</li>
</ul>


<p>```
Change the message displayed by hello.py</p>

<ul>
<li>Update the sayHello() function to output the user&rsquo;s name</li>
<li>Change the sayGoodbye() function to a friendlier message
```</li>
</ul>


<h3>参考</h3>

<p><a href="https://www.atlassian.com/ja/git/tutorial/git-basics#!commit">https://www.atlassian.com/ja/git/tutorial/git-basics#!commit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git / GitHubからいらないファイルを削除する]]></title>
    <link href="http://mzgk.github.io/blog/2014/remove-file-from-github/"/>
    <updated>2014-08-05T19:22:41+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/remove-file-from-github</id>
    <content type="html"><![CDATA[<p>GitHubに誤ってプッシュした、またはいらなくなったファイルを削除する方法。<br/>
ワーキングエリア（作業ディレクトリ）からも削除する方法と、残す方法。</p>

<h2>削除方法</h2>

<p>ローカルで対象のファイルを削除し（ステージングエリアから）、コミット後にプッシュ。</p>

<h3>1. ローカルファイルを削除</h3>

<p><code>
$ git rm ファイル名
</code>
※ただしこれだと、ワーキングエリアからも削除されてしまう。<br/>
ワーキングエリアには残しておき、Git管理対象外としたい場合は、.gitignoreに追記し<br/>
<code>
$ git rm --cached ファイル名
</code></p>

<h3>2. ステージング</h3>

<p><code>
$ git add .
</code></p>

<h3>3. コミット</h3>

<p><code>
$ git commit -m "メッセージ"
</code></p>

<h3>4. プッシュ</h3>

<p><code>
$ git push
</code></p>

<p>※以前に  <code>push -u</code> していない場合は、宛先が必要</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bashでgitコマンドの補完をする]]></title>
    <link href="http://mzgk.github.io/blog/2014/complement-gitcommand-in-bash/"/>
    <updated>2014-08-05T18:53:04+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/complement-gitcommand-in-bash</id>
    <content type="html"><![CDATA[<ul>
<li>補完用のファイルをダウンロード

<ul>
<li><a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">https://github.com/git/git/blob/master/contrib/completion/git-completion.bash</a></li>
</ul>
</li>
<li>~/.git-completion.bashとして設置</li>
<li>~/.bash_profileにパスを記述</li>
</ul>


<p><code>bash
source ~/.git-completion.bash
</code></p>
]]></content>
  </entry>
  
</feed>

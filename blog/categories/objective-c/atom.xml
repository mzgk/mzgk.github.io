<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-05T18:43:23+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Appをインストールできるデバイスを制限する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/restrict-device/"/>
    <updated>2014-08-05T18:39:16+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/restrict-device</id>
    <content type="html"><![CDATA[<p>カメラ機能などを使用するアプリをリリースする場合に、AppStoreからインストールできるデバイスを制限する方法。<br/>
（カメラなしデバイスにインストールさせない方法）</p>

<p><img src="/images/2014/0805/Device.png" alt="Xcode" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSONからデータを取得する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/analyze-json/"/>
    <updated>2014-08-05T18:31:45+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/analyze-json</id>
    <content type="html"><![CDATA[<p>以下のようなJSONデータから指定したデータを取得する方法。</p>

<p>```
meta =
{</p>

<pre><code>method = POST;
url = "/app/ApiPosts/post.json";
</code></pre>

<p>};
response =    /// (1)
{</p>

<pre><code>"comment_id" = 144;   /// (2)
"video_id" = 144;
Adviser = {
    name = "&lt;null&gt;";
};
Post = {
    "adviser_id" = "-1";
    "video_id" = 144;   /// (3)
};
User = {
    id = 1;
    username = taro;
};
Comments =  /// ここは配列でComment-Videoが１セットで複数セットくる
(
    {
        Comment = {
            comment = "\U305d\U305d\U305d\U305d\n";   /// (4)
            id = 144;
        };
        Video = {
            hash = 266d1a0ccabc501149322446e49e274a;    /// (4)
            id = 144;
        };
    }
);
</code></pre>

<p>};
```</p>

<h2>(1) response = 以下のデータを取得</h2>

<p><code>objective-c
NSDictionary *responseDataDic = (NSDictionary*)responseObject[@"response"];
</code></p>

<h2>(2) comment_idのデータを取得</h2>

<p><code>objective-c
NSLog(@"commnt_id : %@", responseDataDic[@"comment_id"]);
</code></p>

<h2>(3) Post の video_idのデータを取得</h2>

<p><code>objective-c
NSLog(@"Post video_id: %@", responseDataDic[@"Post"][@"video_id"]);
</code></p>

<h2>(4) Commentsの中のComment-commentとVideo-hashを取得</h2>

<p>```objective-c
/// 高速列挙で辞書に抜き出し
for (NSDictionary *dic in responseDataDic[@&ldquo;Comments&rdquo;]) {</p>

<pre><code>NSLog(@"Comment id: %@", dic[@"Comment"][@"id"]);
NSLog(@"Video id: %@", dic[@"Video"][@"id"]);
</code></pre>

<p>}
```</p>

<p>もしくは２ステップで</p>

<p>```objective-c
/// 可変配列を用意
NSMutableArray <em>array = [NSMutableArray array];
/// 高速列挙でComments部分を辞書に抜き出し、それを可変配列に追加
for (NSDictionary </em>dic in responseDataDic[@&ldquo;Comments&rdquo;]) {</p>

<pre><code>[array addObject:dic];
</code></pre>

<p>}
/// 可変配列から辞書に抜き出し
for (NSDictionary *dic in array) {</p>

<pre><code>NSLog(@"Comment id: %@", dic[@"Comment"][@"id"]);
NSLog(@"Video id: %@", dic[@"Video"][@"id"]);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MagicalRecordのWarningの消し方]]></title>
    <link href="http://mzgk.github.io/blog/2014/magicalrecord-warning/"/>
    <updated>2014-08-05T18:23:49+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/magicalrecord-warning</id>
    <content type="html"><![CDATA[<p>MagicalRecord2.2はmogeneratorとの使用を想定しているらしく、mogeneratorを使用しない場合はWarningが12個ばかり表示される。<br/>
参考：<a href="https://github.com/magicalpanda/MagicalRecord/issues/652">https://github.com/magicalpanda/MagicalRecord/issues/652</a></p>

<p>動作に特に問題はないが、気持ち悪いのでワーニングを消す方法。<br/>
参考：<a href="http://hayatomo.com/2013/10/03/1122">http://hayatomo.com/2013/10/03/1122</a></p>

<p><img src="/images/2014/0805/MagicalRecord_Warning.png" alt="Xcode" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-Cの真偽値]]></title>
    <link href="http://mzgk.github.io/blog/2014/objectivec-boolean/"/>
    <updated>2014-08-05T18:18:53+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/objectivec-boolean</id>
    <content type="html"><![CDATA[<h3>通常はBOOLなのでこっちを使う</h3>

<ul>
<li>真：YES : 1</li>
<li>偽：NO : 0</li>
</ul>


<h3>Booleanの場合</h3>

<ul>
<li>真：TRUE : 1</li>
<li>偽：FALSE : 0</li>
</ul>


<p>```objective-c
if (!new_flg) {</p>

<pre><code>偽の判断（new_flgの値はNO = 0）
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIButtonでタップ毎にボタン画像を切替える]]></title>
    <link href="http://mzgk.github.io/blog/2014/change-image-of-button-to-tap-each/"/>
    <updated>2014-08-05T18:11:27+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/change-image-of-button-to-tap-each</id>
    <content type="html"><![CDATA[<p>UIButtonをトグルスイッチのように使う方法。<br/>
プレイボタン　→　タップ　→　ストップボタン　→　タップ　→　プレイボタン</p>

<h2>ボタンに画像を設定する</h2>

<p>viewDidLoadなど。画像はアセットカタログに登録済み。</p>

<p><code>objective-c
// 通常（プレイ）
[_button setImage:[UIImage imageNamed:@"playButton"] forState:UIControlStateNormal];
// プレイでボタンをタップ中
[_button setImage:[UIImage imageNamed:@"stopButton"] forState:UIControlStateHighlighted];
// ストップ
[_button setImage:[UIImage imageNamed:@"stopButton"] forState:UIControlStateNormal | UIControlStateSelected];
// ストップでボタンをタップ中
[_button setImage:[UIImage imageNamed:@"playButton"] forState:UIControlStateHighlighted | UIControlStateSelected];
</code></p>

<h2>ボタンタップアクション</h2>

<p>```objective-c
&ndash; (IBAction)userButtonTapped:(UIButton *)sender {</p>

<pre><code>sender.selected = !sender.selected;   // これが重要（状態を入れ替える）
// プレイをタップ
if (sender.selected) {
    _userTimer = [NSTimer scheduledTimerWithTimeInterval:[_userFrameSpeedInfos[0] floatValue]
                                                  target:self
                                                selector:@selector(timerUserView:)
                                                userInfo:nil
                                                 repeats:YES];
}
// ストップをタップ
else {
    [_userTimer invalidate];
}
</code></pre>

<p>}
```</p>

<h2>おまけ</h2>

<p>タイマーが停止した時にボタンをプレイに戻す。</p>

<p>```
 &ndash; (void)timerUserView:(NSTimer*)timer
{</p>

<pre><code>int index = ++_userFramIndex;
if (index &lt; [_userFrameImageInfos count]) {
    [self displayFrameImageAtIndex:index userDistinction:USER];
}
// タイマーを止める
else {
    [timer invalidate];
    _userFramIndex = 0;
    [_userButton setSelected:NO];   // これでプレイに戻る
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>

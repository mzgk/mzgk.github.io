<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-28T10:01:51+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ディレクトリ内を検索し、対象の文字列を含むディレクトリ・ファイルを削除]]></title>
    <link href="http://mzgk.github.io/blog/2014/search-and-delete/"/>
    <updated>2014-08-26T17:01:43+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/search-and-delete</id>
    <content type="html"><![CDATA[<p>~/tmpディレクトリ内に存在する「capture」の文字列を含むディレクトリ・ファイルを削除したい。<br/>
ワイルドカードが使えないみたいなので、以下で対応。</p>

<p>```objective-c
&ndash; (void)deleteTmpCaptureDir
{</p>

<pre><code>NSFileManager *manager = [NSFileManager defaultManager];
NSError *error = nil;
// ~/tmpディレクトリの取得
NSString *tmpDir = NSTemporaryDirectory();
// tmpディレクトリ内の一覧取得
NSArray *list = [manager contentsOfDirectoryAtPath:tmpDir error:&amp;error];
// 一覧の中から「capture」を含むディレクトリ・ファイルを検索
for (NSString *path in list) {
    NSRange range = [path rangeOfString:@"capture"];
    // 存在したならば削除
    if (NSNotFound != range.location) {
        NSString *target = [tmpDir stringByAppendingPathComponent:path];
        [manager removeItemAtPath:target error:&amp;error];
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[１つの画面の上下で同じViewControllerを使う方法（addChildViewController）]]></title>
    <link href="http://mzgk.github.io/blog/2014/addchiledviewcontroller/"/>
    <updated>2014-08-22T18:18:14+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/addchiledviewcontroller</id>
    <content type="html"><![CDATA[<ul>
<li>１つの画面（A-ViewController）の上下にImageViewとスライダーを表示し、 同じ処理をさせる必要があった</li>
<li>画面上に２つずつUIImageViewとUISliderを配置して制御してもいいけど、同じことするのは面倒</li>
<li>同じ処理なので１つのViewController（UIImageViewとUISliderを持った）を作成（MovieVCとする）</li>
<li>大元の画面（A-ViewController）で、上下に作成したMovieVCを呼べばいいのでは？</li>
<li>Container ViewController？</li>
</ul>


<!-- more -->


<p>テスト用にMovieViewはWebを表示するようにして、作成してみた。こんな感じ。<br/>
<img src="/images/2014/0822/image.png" alt="image" /></p>

<p>StoryBoardは、こんな感じで設定。<br/>
<img src="/images/2014/0822/storyboard.png" alt="image" /></p>

<h2>大元の画面（A-ViewController）</h2>

<p>.m</p>

<p>```objective-c
// MovieVCをインポート</p>

<h1>import &ldquo;MovieViewController.h&rdquo;</h1>

<p>@interface DetailViewController ()
// 画面の上下にUIViewを配置して接続
@property (weak, nonatomic) IBOutlet UIView <em>upperView;
@property (weak, nonatomic) IBOutlet UIView </em>lowerView;</p>

<p>// MovieVCのプロパティを用意
@property (nonatomic) MovieViewController <em>upperMovieVC;
@property (nonatomic) MovieViewController </em>lowerMovieVC;
@end</p>

<p>@implementation DetailViewController
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];

// MovieVCのインスタンスを生成（[MovieViewController new]ではダメ）
_upperMovieVC = [self.storyboard instantiateViewControllerWithIdentifier:@"MovieScene"];
_lowerMovieVC = [self.storyboard instantiateViewControllerWithIdentifier:@"MovieScene"];

// 自身のVCの子とする
[self addChildViewController:_upperMovieVC];
[self addChildViewController:_lowerMovieVC];

// 用意してあるUIViewに生成した子（MovieVC）のviewを追加
[_upperView addSubview:_upperMovieVC.view];
[_lowerView addSubview:_lowerMovieVC.view];

// 子に追加した旨を通知
[_upperMovieVC didMoveToParentViewController:self];
[_lowerMovieVC didMoveToParentViewController:self];

// テストのために用意したMovieVCのメソッドに違うURLを渡す
[_upperMovieVC connectURL:@"http://google.co.jp"];
[_lowerMovieVC connectURL:@"http://yahoo.co.jp"];
</code></pre>

<p>}
@end
```</p>

<h2>MovieVC</h2>

<p>.h</p>

<p><code>objective-c
@interface MovieViewController : UIViewController&lt;UIWebViewDelegate&gt;
- (void)connectURL:(NSString *)urlString;
@end
</code></p>

<p>.m</p>

<p>```objective-c
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
NSLog(@"MovieView viewDidLoad");
</code></pre>

<p>}</p>

<ul>
<li><p>(void)connectURL:(NSString <em>)urlString
{
  NSURL </em>url = [NSURL URLWithString:urlString];
  NSURLRequest *request = [NSURLRequest requestWithURL:url];
  <em>webView.delegate = self;
  [</em>webView loadRequest:request];
}</p></li>
<li><p>(void)willMoveToParentViewController:(UIViewController *)parent
{
  NSLog(@&ldquo;MovieVC&rdquo;);
}
```</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIActionSheetでタップされたボタンのタイトルを取得する]]></title>
    <link href="http://mzgk.github.io/blog/2014/uiactionsheet-tapped-buttontitle/"/>
    <updated>2014-08-22T13:52:26+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/uiactionsheet-tapped-buttontitle</id>
    <content type="html"><![CDATA[<p>UIActionSheetで、タップされたボタンのタイトルを取得する方法。</p>

<p>```objective-c
&ndash; (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{</p>

<pre><code>// キャンルボタンかどうかの判断（おまけ）
if (buttonIndex != actionSheet.cancelButtonIndex) {
    // タップされたボタンのタイトルを取得
    _label.text = [actionSheet buttonTitleAtIndex:buttonIndex];
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreDataのマイグレーション（その１）]]></title>
    <link href="http://mzgk.github.io/blog/2014/coredata-migration/"/>
    <updated>2014-08-22T13:35:20+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/coredata-migration</id>
    <content type="html"><![CDATA[<p>CoreDataを使ったアプリで、リリース後にエンティティに属性を追加したい場合の対応方法。<br/>
もちろん、今のデータを保持したままマイグレーションさせるのが前提。</p>

<ul>
<li>MagicalRecord使用済み</li>
<li>アプリリリース後にエンティティに属性を追加する</li>
<li>当然、今保存されているデータは引継がれることが前提</li>
</ul>


<h2>MagicalRecord</h2>

<p>セットアップ部分。<br/>
AppDelegate.m</p>

<p>```objective-c
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>...
// .xcdatamodelがプロジェクト名と違うし、自動マイグレーションしてほしい（最初から設定済み）
[MagicalRecord setupCoreDataStackWithAutoMigratingSqliteStoreNamed:@"Model.sqlite"];
...
</code></pre>

<p>}
```</p>

<h3>どのセットアップメソッドを使用するか</h3>

<p>ここを参考：<a href="http://www.raywenderlich.com/56879/magicalrecord-tutorial-ios">http://www.raywenderlich.com/56879/magicalrecord-tutorial-ios</a></p>

<p>CoreDataを作成した際の <code>{任意の名前}.xcdatamodel</code> が、プロジェクト名と同じであれば</p>

<ul>
<li>setupCoreDataStack</li>
<li>setupCoreDataStackWithInMemoryStore</li>
<li>setupAutoMigratingCoreDataStack</li>
</ul>


<p>違うならば</p>

<ul>
<li>setupCoreDataStackWithStoreNamed:</li>
<li>setupCoreDataStackWithAutoMigratingSqliteStoreNamed:</li>
</ul>


<p><code>AutoMigrating</code> がついている方は、属性追加などをした際に可能であれば自動でマイグレーションしてくれる。</p>

<h2>Xcode</h2>

<h3>Modelのバージョンを追加</h3>

<p><code>{任意の名前}.xcdatamodel</code> を選択し、Editor &ndash;> Add Model Version&hellip;<br/>
<img src="/images/2014/0822/addmodelversion.png" alt="Model Version" /></p>

<p><img src="images/2014/0822/addModel2.png" alt="Model2" /></p>

<h3>新しく追加したModelに属性を追加</h3>

<p>新しく追加した方のモデル（Model2）に属性を追加する。</p>

<h3>Current Versionの変更</h3>

<ul>
<li>Model.xcdatamodeledを選択する</li>
<li>File inspectorを選択し、<code>Model Version -&gt; Current</code> で、追加した方（Model2）を選択する</li>
<li>Model2.xcdatamodeledにチェックマークがつく</li>
</ul>


<p><img src="/images/2014/0822/changeCurrent.png" alt="changeVersion" /></p>

<h2>属性名の変更など</h2>

<p>属性名の変更などについては、Lightweightマイグレーションという手法を使用するらしい（未検証）  。<br/>
また、マッピングモデルを使ったマイグレーションも存在するらしい（未検証）。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.raywenderlich.com/56879/magicalrecord-tutorial-ios">http://www.raywenderlich.com/56879/magicalrecord-tutorial-ios</a></li>
<li>iOS Core Data 徹底入門（10章）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[キーボードの上に閉じるボタンを表示する（inputAccessoryView）]]></title>
    <link href="http://mzgk.github.io/blog/2014/keyboard-close-inputaccessoryview/"/>
    <updated>2014-08-21T15:03:05+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/keyboard-close-inputaccessoryview</id>
    <content type="html"><![CDATA[<p>UITextViewなどでキーボードを閉じたい時に、キーボードの上部に閉じるボタンを追加して閉じる方法。<br/>
inputAccessoryViewといって、キーボード上部にボタンなどを配置できる。<br/>
キーボードの表示／非表示に合わせて、表示／非表示される。</p>

<h2>生成</h2>

<p>```objective-c
&ndash; (void)viewDidLoad
{
&hellip;</p>

<pre><code>// ボタンを配置するUIViewを作成（幅320／高さ44・背景色：透明）
UIView* accessoryView =[[UIView alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];
accessoryView.backgroundColor = [UIColor clearColor];

// ボタンを作成（accessoryView内で、X:270 Y:5 Width:40 Height:30にイメージ有りボタン）
UIButton* closeButton = [UIButton buttonWithType:UIButtonTypeCustom];
[closeButton setImage:[UIImage imageNamed:@"hideKeyboard"] forState:UIControlStateNormal];
closeButton.contentMode = UIViewContentModeScaleAspectFit;
closeButton.frame = CGRectMake(270, 5, 40, 30);
// ボタンタップ時のメソッドを指定（closeKeyboard:　→　自作メソッド）
[closeButton addTarget:self action:@selector(closeKeyboard:) forControlEvents:UIControlEventTouchUpInside];

// ボタンをViewに追加
[accessoryView addSubview:closeButton];

// ビューをUITextFieldのinputAccessoryViewに設定
_textView.inputAccessoryView = accessoryView;
</code></pre>

<p>&hellip;
}
```</p>

<h2>ボタンタップ時の処理</h2>

<p>Closeボタン実行時の処理も記述する。</p>

<p>```
&ndash;(void)closeKeyboard:(id)sender
{</p>

<pre><code>[self.view endEditing:YES];
</code></pre>

<p>}
```</p>

<h2>関連</h2>

<p>UITextView関連では、以下もあり。<br/>
<a href="http://mzgk.github.io/blog/2014/uiscrollview-tapevent/">http://mzgk.github.io/blog/2014/uiscrollview-tapevent/</a></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-05T15:26:32+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ファイルパス（NSString）をNSURLに変換する方法（日本語OK）]]></title>
    <link href="http://mzgk.github.io/blog/2014/filepath-nsurl/"/>
    <updated>2014-08-05T15:07:00+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/filepath-nsurl</id>
    <content type="html"><![CDATA[<p>日本語のディレクトリ名が入るとおかしくなるが、この方法だとOK。</p>

<p><code>objective-c
NSString* string = @"/Users/abt/Documents/日本語のフォルダ名/file.txt";
NSURL* url = [NSURL fileURLWithPath:string];
// NGケース（nilが返る）
NSURL* nilUrl = [NSURL URLWithString:string];
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[引っ張って更新を使う（UITableViewController / UITableView）]]></title>
    <link href="http://mzgk.github.io/blog/2014/uirefreshcontrol/"/>
    <updated>2014-08-05T14:42:13+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/uirefreshcontrol</id>
    <content type="html"><![CDATA[<p>UITableViewControllerを使うか、UITableViewを直で使うかによって、コードの差異あり。</p>

<p>```objective-c
@property (weak, nonatomic) IBOutlet UITableView <em>postlistTableView;
@property (strong, nonatomic) UIRefreshControl </em>refreshControl;</p>

<ul>
<li><p>(void)viewDidLoad
{
  <em>refreshControl = [UIRefreshControl new];
  [</em>postlistTableView addSubview:<em>refreshControl];    // （差異）UITableViewを直で使う場合
  self.refreshControl = refreshControl;               // （差異）UITableViewControllerを使う場合
  [</em>refreshControl addTarget:self
                      action:@selector(refreshOccured:)    // 更新時の処理を行う自作メソッド名
            forControlEvents:UIControlEventValueChanged];
  _postlistTableView.alwaysBounceVertical = YES;          // セルが空でも可能とする
}</p></li>
<li><p>(void)refreshOccured:(id)sender
{
  // 更新で行う処理を記述
  // 更新処理を終了させる
  [<em>refreshControl endRefreshing];
  [</em>postlistTableView reloadData];
}
```</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[対象のビューがサブビューかどうか判断する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/confirm-subview/"/>
    <updated>2014-08-05T14:26:28+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/confirm-subview</id>
    <content type="html"><![CDATA[<p>対象のビューがサブビューかどうか（ビューに存在しているか？）を判断する方法。</p>

<p>```objective-c
// メモリから破棄されないように"strong"を指定
@preoperty (strong, nonatomatic) IBOutlet UILabel *myLabel;</p>

<ul>
<li>(IBAction)removeAllLabel:(id)sender
{
  if ([<em>mylabel isDescendantOfView:self.view]) {
      // ビューから取り除く
      [</em>myLabel removeFromSuperView];
  }
  else {
      // ビューに追加する
      [self.view addSuperView:_mylabel];
  }
}
```</li>
</ul>


<h2>スーパービューを調べる</h2>

<p><code>_myLabel.superView</code> でも、_myLabelにスーパービューがあるかどうか調べられる。</p>

<h2>取り除く≒非表示</h2>

<p><code>_myLabel.hidden = YES;</code> で、取り除くことなく非表示化できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodeで例外が発生した場所を特定する]]></title>
    <link href="http://mzgk.github.io/blog/2014/exception-breakpoint/"/>
    <updated>2014-08-05T14:00:51+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/exception-breakpoint</id>
    <content type="html"><![CDATA[<p>Xcodeでのデバック実行中に例外が発生した場合、mainで終了し、どこで例外が発生したのかがわからない場合がある。<br/>
そんな時に有効な設定。</p>

<p>ナビゲーションエリア　→　ブレークポイントナビゲーター（⌘+7）→　左下の＋ボタン　→　Add Exception Breakpoint&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[論理演算子を使って状態を逆転させる]]></title>
    <link href="http://mzgk.github.io/blog/2014/logicaloperator/"/>
    <updated>2014-08-05T13:13:59+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/logicaloperator</id>
    <content type="html"><![CDATA[<p>スイッチのON／OFFなどで、イメージの表示／非表示を制御する際の方法。</p>

<p>```objective-c
&ndash; (IBAction)switchChange:(UISwitch *)sender {</p>

<pre><code>// スイッチのON/OFFと逆の設定をする方法
_photo.hidden = !(sender.on);

// 状態の逆転をさせる方法
_photo.hidden = !(_photo.hidden);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>

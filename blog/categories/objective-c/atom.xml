<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-09-09T15:52:55+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Viewのプロパティ値を変化させるアニメーション]]></title>
    <link href="http://mzgk.github.io/blog/2014/view-animation/"/>
    <updated>2014-09-09T15:29:12+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/view-animation</id>
    <content type="html"><![CDATA[<p>UIViewクラスの <code>animateWithDuration:delay:options:animations:completion</code> メソッドを使うと、ビューのプロパティを変化させてアニメーションを作成することができる。<br/>
このサンプルでは、ビューが下に50移動する動きを繰り返すアニメーション。</p>

<!-- more -->


<p>```objective-c ViewController.m
&ndash; (void)viewDidAppear:(BOOL)animated
{</p>

<pre><code>// 座標がとれるのはviewDidAppearのとき
CGFloat centerX = _baseView.center.x;
CGFloat centerY = _baseView.center.y;

UIViewAnimationOptions animeOptions =
UIViewAnimationOptionCurveEaseInOut |   // 加速して開始・減速して終了（イーズインアウト）
UIViewAnimationOptionAutoreverse |      // 自動逆再生
UIViewAnimationOptionRepeat;            // 繰り返し

[UIView animateWithDuration:1.0     // アニメの秒数
                      delay:2.0     // 開始待ち時間
                    options:animeOptions
                 animations:^{      // 変化させるプロパティ
                     _baseView.center = CGPointMake(centerX, centerY+50);
                 }
                 completion:nil     // アニメーション完了時に行う処理
                 ];
</code></pre>

<p>}
```</p>

<h3>変化させることができるプロパティ</h3>

<ul>
<li>frame</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>backgroundColor</li>
<li>contentStretch</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITextFieldでキーボード閉じる方法３つ]]></title>
    <link href="http://mzgk.github.io/blog/2014/textfield-hide-keyboard/"/>
    <updated>2014-09-02T18:08:54+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/textfield-hide-keyboard</id>
    <content type="html"><![CDATA[<p>UITextFieldで、表示されているキーボードを閉じる方法のまとめ。<br/>
パターン的には３つ。</p>

<ol>
<li>UITextFieldのアクションを使用（リターンキーで閉じる）</li>
<li>UITextFieldのデリゲートを使用（リターンキーで閉じる）</li>
<li>Tap Gestureを使用（他の場所をタップで閉じる）</li>
</ol>


<!-- more -->


<h2>UITextFieldのアクションを使用（リターンキーで閉じる）</h2>

<p>StoryBoardを使った、一番お手軽なパターン。<br/>
キーボードのリターンキーで、キーボードが閉じる。</p>

<ul>
<li>StoryBoard上でUITextFieldを右クリック</li>
<li>Sent Events &ndash;> Did End On Exitを選択</li>
<li>Ctrl + ドラッグでアクション接続</li>
<li>IBActionのメソッド内に処理は不要</li>
</ul>


<h2>UITextFieldのアクションを使用（リターンキーで閉じる）</h2>

<p>よく見かけるパターン。<br/>
キーボードのリターンキーで、キーボードが閉じる。</p>

<ul>
<li><UITextFieldDelegate>プロトコルを接続（.hの@interface部分）</li>
<li>.mにデリゲートメソッドを追加</li>
<li>処理を記述</li>
</ul>


<p>```objective-c ViewController.h
@interface ViewController : UIViewController<UITextFieldDelegate></p>

<p>@end
```</p>

<p>```objective-c ViewController.m
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// デリゲートを設定
_textField.delegate = self;
</code></pre>

<p>}</p>

<ul>
<li>(BOOL)textFieldShouldReturn:(UITextField *)textField
{
  // これか
  [self.view endEditing:YES];
  // これ
  [_textField resignFirstResponder];
  return YES;
}
```</li>
</ul>


<h2>Tap Gestureを使用（他の場所をタップで閉じる）</h2>

<p>キーボードのリターンキーではなく、他の場所をタップした際にキーボードを閉じる。</p>

<ul>
<li>StoryBoard上で、ViewControllerに Tap GestureRecognizer を追加</li>
<li>Ctrl + ドラッグでアクション接続</li>
<li>処理を記述</li>
</ul>


<p>```objective-c ViewController.m
&ndash; (IBAction)onTapView:(id)sender
{</p>

<pre><code>// これか
[self.view endEditing:YES];
// こんな感じ
if ([_textField isFirstResponder]) {
    [_textField resignFirstResponder];
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文字列の大小比較]]></title>
    <link href="http://mzgk.github.io/blog/2014/string-compare/"/>
    <updated>2014-09-01T19:14:57+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/string-compare</id>
    <content type="html"><![CDATA[<p>文字列を大小比較する場合は、以下を使用する。</p>

<p>```objective-c 文字列の大小比較
NSComparisonResult result = [比較元 compare:比較相手];
if (result == NSOrderedAscending) {</p>

<pre><code>結果：元　＜　相手：-1
</code></pre>

<p>}
else if (result == NSOrderedSame) {</p>

<pre><code>結果：元　＝　相手：0
</code></pre>

<p>}
else if (result == NSOrderedDescending) {</p>

<pre><code>結果：元　＞　相手：1
</code></pre>

<p>}
```</p>

<p>単純に等しいかどうかの判断であれば <code>isEqualToString:</code> を使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSLog()を記述せずに、ブレークポイントでログを出力する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/breakpoint-automessage/"/>
    <updated>2014-08-29T15:26:02+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/breakpoint-automessage</id>
    <content type="html"><![CDATA[<p>ちょっとした確認をしたいときや、NSLog()を残したくない場合などに、ブレークポイントを使ってコンソールにログを出力する方法。<br/>
Xcodeのブレークポイントの設定だけで、停止せずにログを出力できる。</p>

<!-- more -->


<h2>ブレークポイント</h2>

<ul>
<li>ブレークポイントを設定</li>
<li>右クリック &ndash;> Edit Breakpoint&hellip;</li>
<li>Action &ndash;> Log Message</li>
<li>入力欄に出力したい文言を記述</li>
<li>変数の値を出力したい場合は、@変数名@</li>
<li>Options &ndash;> Automatically〜にチェックを入れると止まらずにコンソールに出力する</li>
</ul>


<p><img src="/images/2014/0829/breakpoint.png" alt="設定方法" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSLog()のリリース時停止漏れを防ぐマクロ]]></title>
    <link href="http://mzgk.github.io/blog/2014/nslog-macro/"/>
    <updated>2014-08-29T15:03:40+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/nslog-macro</id>
    <content type="html"><![CDATA[<p>リリース時にNSLog()が仕込まれたままの状態を防ぐ。<br/>
デバッグ時のみ、ログ出力（関数名・行番号をつけて）を行う。</p>

<!-- more -->


<h2>アプリ名-prefix.pch</h2>

<p>アプリ名-prefix.pchに以下を記載する。</p>

<p>```objective-c アプリ名-prefix.pch</p>

<h1>ifdef DEBUG</h1>

<h1>define dLog(fmt, &hellip;) NSLog((@&ldquo;%s [Line %d] &rdquo; fmt), <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>, ##<strong>VA_ARGS</strong>);</h1>

<h1>else</h1>

<h1>define dLog(&hellip;)</h1>

<h1>endif</h1>

<p>// ALog always displays output regardless of the DEBUG alarm</p>

<h1>define aLog(fmt, &hellip;) NSLog((@&ldquo;%s [Line %d] &rdquo; fmt), <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>, ##<strong>VA_ARGS</strong>);</h1>

<p>```</p>

<h2>使用方法</h2>

<ul>
<li>dLog(@“TEST!”);　→　デバッグ時のみNSLogで出力（[関数名] [Line 25] TEST!）</li>
<li>dLog();　→　これも可（[関数名] [Line 25]）</li>
<li>aLog();　→　デバッグ・リリースに関係なく出力される。</li>
</ul>


<h2>参考</h2>

<p><a href="http://d.hatena.ne.jp/k2_k_hei/20120511/1336750473">http://d.hatena.ne.jp/k2_k_hei/20120511/1336750473</a></p>
]]></content>
  </entry>
  
</feed>

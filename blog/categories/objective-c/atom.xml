<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-05T17:45:54+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UITableViewのセル編集をさせない方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/not-allowed-to-edit-cell/"/>
    <updated>2014-08-05T17:42:38+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/not-allowed-to-edit-cell</id>
    <content type="html"><![CDATA[<p>セルスワイプでの削除をやめる方法。<br/>
セルの編集を許可するかどうかを返すメソッドでNOを返す。</p>

<p>```objective-c
&ndash; (BOOL)tableView:(UITableView <em>)tableView canEditRowAtIndexPath:(NSIndexPath </em>)indexPath
{</p>

<pre><code>// Return NO if you do not want the specified item to be editable.
// TODO: セル削除を可能にする時はYESに変更すること
return NO;
</code></pre>

<p>}
```</p>

<p>もしくは、以下のメソッドをコメントアウト。</p>

<p>```objective-c
&ndash; (void)tableView:(UITableView <em>)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath </em>)indexPath
{</p>

<pre><code>if (editingStyle == UITableViewCellEditingStyleDelete) {
    [_objects removeObjectAtIndex:indexPath.row];
    [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
} else if (editingStyle == UITableViewCellEditingStyleInsert) {
    // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アプリのデータをiTunesで共有する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/share-itunes/"/>
    <updated>2014-08-05T17:11:29+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/share-itunes</id>
    <content type="html"><![CDATA[<p>アプリ内のデータをiTunesから取得したり、追加したりする際の設定方法。<br/>
デバイスをiTunesに接続し、上のAppタブを選択、ファイル共有で対象のアプリを選択すると、共有できるファイルが表示される。</p>

<h2>Supporting Files</h2>

<ul>
<li>｛アプリ名｝-Info.plistを開く</li>
<li>Information Property Listの隣の＋をクリックし、行を追加</li>
<li>Application supports iTunes file sharingを選択</li>
<li>値のYESを選択</li>
</ul>


<p><img src="/images/2014/0805/iTunes_1.png" alt="iTunes共有1" /></p>

<p>参考：
<a href="http://qiita.com/SolaRayLino/items/8a4eb1821559122b4cbf">http://qiita.com/SolaRayLino/items/8a4eb1821559122b4cbf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アプリのバージョン取得]]></title>
    <link href="http://mzgk.github.io/blog/2014/get-app-version/"/>
    <updated>2014-08-05T17:07:29+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/get-app-version</id>
    <content type="html"><![CDATA[<p>ソース内でアプリのバージョンを取得する方法。</p>

<p>```objective-c
// バージョン：TARGET- General &ndash; Identity &ndash; Version（Info.plist : Bundle version strings short）
NSString *version = [[NSBundle mainBundle]infoDictionary][@&ldquo;CFBundleShortVersionString&rdquo;];</p>

<p>// バンドル：TARGET- General &ndash; Identity &ndash; Bundle（Info.plist : Bundle version）
NSString *bundle = [[NSBundle mainBundle]infoDictionary][@&ldquo;CFBundleVersion&rdquo;];
```</p>

<p>VersionとBundleの違いについては、理解不足。</p>

<ul>
<li>Version

<ul>
<li>表記用のリリースバージョン</li>
</ul>
</li>
<li>Bundle

<ul>
<li>内部開発用のビルドバージョン</li>
</ul>
</li>
</ul>


<p>とのことみたいだが、リリース時は両方が一致している必要があるらしいとのこと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カテゴリファイルの作り方]]></title>
    <link href="http://mzgk.github.io/blog/2014/make-category/"/>
    <updated>2014-08-05T16:49:30+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/make-category</id>
    <content type="html"><![CDATA[<p>カテゴリファイルを作る際の命名方法。<br/>
カテゴリーファイルを選択して、</p>

<p><img src="/images/2014/0805/Category.png" alt="Xcode" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カメラで撮影した動画をフレーム分割する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/video-devide/"/>
    <updated>2014-08-05T16:24:50+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/video-devide</id>
    <content type="html"><![CDATA[<p>UIImagePickerで撮影した動画を1秒30フレーム程度で、分割し静止画にする方法。</p>

<p>```objective-c
/<em>!
 * 撮影ボタン（作成する）
 </em>/
&ndash; (IBAction)shutterButtonTapped:(id)sender {</p>

<pre><code>// UIImagePickerで動画の撮影をする
UIImagePickerController *picker = [[UIImagePickerController alloc]init];
picker.sourceType = UIImagePickerControllerSourceTypeCamera;
picker.mediaTypes = @[(NSString *)kUTTypeMovie];
picker.cameraCaptureMode = UIImagePickerControllerCameraCaptureModeVideo;
picker.videoQuality = UIImagePickerControllerQualityType640x480;
picker.videoMaximumDuration = 10;
picker.allowsEditing = NO;
picker.delegate = self;
[self presentViewController:picker animated:YES completion:nil];
</code></pre>

<p>}</p>

<p>/<em>!
 * 撮影終了のタイミング
 </em>/
&ndash; (void)imagePickerController:(UIImagePickerController <em>)picker didFinishPickingMediaWithInfo:(NSDictionary </em>)info
{</p>

<pre><code>// UIImagePickerをしまう
[picker dismissViewControllerAnimated:YES completion:nil];

// ~/Documentsディレクトリの取得
NSArray *directories = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString *documentDirectory = directories[0];

// 撮影した動画をAssetに格納
NSURL *assetURL = info[UIImagePickerControllerMediaURL];
AVURLAsset *asset = [[AVURLAsset alloc]initWithURL:assetURL options:nil];

// 動画を切り出す間隔を配列に格納する
Float64 frameParSecond = 0.033f;
Float64 durationSeconds = CMTimeGetSeconds([asset duration]);   // 動画の長さ
Float64 frameTimeStamp = 0;
NSMutableArray *times  = [NSMutableArray array];
while (frameTimeStamp &lt;= durationSeconds) {
    [times addObject:[NSValue valueWithCMTime:CMTimeMakeWithSeconds(frameTimeStamp, 600)]];
    CMTime nextTime = CMTimeMakeWithSeconds(frameTimeStamp, 600);
    frameTimeStamp = CMTimeGetSeconds(nextTime) + frameParSecond;
}

// 画像ジェネレーターを生成
AVAssetImageGenerator *generator = [[AVAssetImageGenerator alloc]initWithAsset:asset];
generator.appliesPreferredTrackTransform = YES;
generator.requestedTimeToleranceBefore = kCMTimeZero;
generator.requestedTimeToleranceAfter = kCMTimeZero;

// 一連の画像を生成（timesに格納されている分だけ、第２引数がコールバックされる）
[generator generateCGImagesAsynchronouslyForTimes:times
                                completionHandler:^(CMTime requestedTime, CGImageRef image, CMTime actualTime, AVAssetImageGeneratorResult result, NSError *error) {
                                    NSString *requestedTimeString = (NSString*)CFBridgingRelease(CMTimeCopyDescription(NULL, requestedTime));
                                    NSString *acturalTimeString = (NSString*)CFBridgingRelease(CMTimeCopyDescription(NULL, actualTime));
                                    NSLog(@"Requested: %@; actual: %@", requestedTimeString, acturalTimeString);
                                    if (result == AVAssetImageGeneratorSucceeded) {
                                        // JPEG画像を生成し、保存する
                                        [self writeCGImageTo:documentDirectory image:image];
                                        // iCnt++;
                                        // 完了した判断はtimesの個数と保存した個数でする？
                                        // [times count] == iCntだったら、SVProgressHub停止みたいな
                                    }
                                    if (result == AVAssetImageGeneratorFailed) {
                                        NSLog(@"Failed with error: %@", [error localizedDescription]);
                                    }
                                    if (result == AVAssetImageGeneratorCancelled) {
                                        NSLog(@"Cancelled");
                                    }
                                }];
</code></pre>

<p>}</p>

<p>/<em>!
 * 動画から切り出されたCGImageRef形式のデータをJPEG画像（ファイル名は連番：imageNameNumber）に生成し、指定ディレクトリに書き出す
 </em>/
&ndash; (BOOL)writeCGImageTo:(NSString*)path image:(CGImageRef)cgImage
{</p>

<pre><code>NSLog(@"Called");

NSString *str = [NSString stringWithFormat:@"img_%@.jpg", @(self.imageNameNumber++)];
path = [path stringByAppendingPathComponent:str];

UIImage *saveImage = [UIImage imageWithCGImage:cgImage];
NSData *data = UIImageJPEGRepresentation(saveImage, 1.0);   // 0.0（低水準）〜1.0（高水準）
BOOL result = [data writeToFile:path atomically:YES];
return result;
</code></pre>

<p>}
```</p>

<p>参考：公式の「AVFoundationプログラミングガイド」P17 アセットの使用　ビデオから静止画像の取得　一連の画像の生成</p>
]]></content>
  </entry>
  
</feed>

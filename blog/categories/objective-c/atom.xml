<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-10-07T20:19:24+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSUserDefaultsの中身を確認する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/see-nsuserdefaults-data/"/>
    <updated>2014-10-02T13:52:39+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/see-nsuserdefaults-data</id>
    <content type="html"><![CDATA[<p>アプリ内で処理したNSUserDefaultsの中身を確認する方法。</p>

<!-- more -->


<ol>
<li>デバイスをXcodeに接続する</li>
<li>メニューバー &ndash;> Window &ndash;> OrganizerからOrganizerを起動</li>
<li>左ペインのDEVICESで接続しているデバイスを選択し、Applicationsをクリック</li>
<li>右ペインに表示されたアプリから対象のアプリを選択</li>
<li>下ペインの Download をクリック &ndash;> 適当な場所に保存（"Bundle Identifier 日付時刻".xcappdata）</li>
<li>ダウンロードしたファイルを右クリック &ndash;> パッケージの内容を表示</li>
<li>AppData/Library/Preferences/&ldquo;Bundle Identifier&rdquo;.plist をダブルクリック</li>
<li>Xcodeが起動し、中身（Key , Type , Value）が確認できる</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIButtonのタイトル位置を調整する方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/uibutton-title-align/"/>
    <updated>2014-10-02T13:13:05+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/uibutton-title-align</id>
    <content type="html"><![CDATA[<p>UIButtonのタイトルはデフォルトでは中央配置になっているが、これを左詰めや右詰めにする方法。</p>

<!-- more -->


<h2>StoryBoard</h2>

<p>StoryBoardでは、スクリーンショットに書いてある部分で設定が可能。
<img src="/images/2014/1002/UIButton-title.png" title="ボタンタイトル位置" alt="attribute" /></p>

<h2>Code</h2>

<p>コードでは以下で設定。</p>

<p>```objective-c
// 左詰め
_button.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;</p>

<p>// 右詰め
_button.contentHorizontalAlignment = UIControlContentHorizontalAlignmentRight;
```</p>

<h2>参考</h2>

<p>その他の設定方法はここが参考になりました。<br/>
<a href="http://web-terminal.blogspot.jp/2013/01/uibutton.html">http://web-terminal.blogspot.jp/2013/01/uibutton.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指定時間後に処理を行う]]></title>
    <link href="http://mzgk.github.io/blog/2014/run-at-a-specified-time-after/"/>
    <updated>2014-09-09T17:21:18+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/run-at-a-specified-time-after</id>
    <content type="html"><![CDATA[<p>NSTimerを使用して、指定時間後に処理を実行させる方法。<br/>
サンプルは、ボタンをタップしたら１秒後に処理を実行するサンプル。</p>

<!-- more -->


<p>```objective-c ViewController.m
&ndash; (IBAction)adjustButton:(UIButton *)sender {</p>

<pre><code>// タイマー処理に引継ぐデータを格納
NSDictionary *userInfo = @{@"duration":_durationField.text,
                           @"delay":_delayField.text};

// タイマー設定
[NSTimer scheduledTimerWithTimeInterval:1.0                     // 1秒後
                                 target:self                    // 呼び出すメソッドのインスタンス
                               selector:@selector(doTimer:)     // 呼び出すメソッド
                               userInfo:userInfo                // 引き渡すデータ
                                repeats:NO];                    // 繰り返し
</code></pre>

<p>}</p>

<p>/// タイマー処理（この形式であること）
&ndash; (void)doTimer:(NSTimer *)timer
{</p>

<pre><code>// データの取り出し
float duration = [(timer.userInfo)[@"duration"]floatValue];
float delay = [(timer.userInfo)[@"delay"]floatValue];

// やりたい処理
[self goalAnimationWithDuration:duration andDelay:delay];
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viewのプロパティ値を変化させてアニメーションをつくる]]></title>
    <link href="http://mzgk.github.io/blog/2014/view-animation/"/>
    <updated>2014-09-09T15:29:12+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/view-animation</id>
    <content type="html"><![CDATA[<p>UIViewクラスの <code>animateWithDuration:delay:options:animations:completion</code> メソッドを使うと、ビューのプロパティを変化させてアニメーションを作成することができる。<br/>
このサンプルでは、ビューが下に50移動する動きを繰り返すアニメーション。</p>

<!-- more -->


<p>```objective-c ViewController.m
&ndash; (void)viewDidAppear:(BOOL)animated
{</p>

<pre><code>// 座標がとれるのはviewDidAppearのとき
CGFloat centerX = _baseView.center.x;
CGFloat centerY = _baseView.center.y;

// アニメーションのオプション
UIViewAnimationOptions animeOptions =
UIViewAnimationOptionCurveEaseInOut |   // 加速して開始・減速して終了（イーズインアウト）
UIViewAnimationOptionAutoreverse |      // 自動逆再生
UIViewAnimationOptionRepeat;            // 繰り返し

// 処理
[UIView animateWithDuration:1.0     // アニメの秒数
                      delay:2.0     // 開始待ち時間
                    options:animeOptions
                 animations:^{      // 変化させるプロパティ
                     _baseView.center = CGPointMake(centerX, centerY+50);
                 }
                 completion:nil     // アニメーション完了時に行う処理
                 ];
</code></pre>

<p>}
```</p>

<h3>変化させることができるプロパティ</h3>

<ul>
<li>frame</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>backgroundColor</li>
<li>contentStretch</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITextFieldでキーボード閉じる方法３つ]]></title>
    <link href="http://mzgk.github.io/blog/2014/textfield-hide-keyboard/"/>
    <updated>2014-09-02T18:08:54+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/textfield-hide-keyboard</id>
    <content type="html"><![CDATA[<p>UITextFieldで、表示されているキーボードを閉じる方法のまとめ。<br/>
パターン的には３つ。</p>

<ol>
<li>UITextFieldのアクションを使用（リターンキーで閉じる）</li>
<li>UITextFieldのデリゲートを使用（リターンキーで閉じる）</li>
<li>Tap Gestureを使用（他の場所をタップで閉じる）</li>
</ol>


<!-- more -->


<h2>UITextFieldのアクションを使用（リターンキーで閉じる）</h2>

<p>StoryBoardを使った、一番お手軽なパターン。<br/>
キーボードのリターンキーで、キーボードが閉じる。</p>

<ul>
<li>StoryBoard上でUITextFieldを右クリック</li>
<li>Sent Events &ndash;> Did End On Exitを選択</li>
<li>Ctrl + ドラッグでアクション接続</li>
<li>IBActionのメソッド内に処理は不要</li>
</ul>


<h2>UITextFieldのアクションを使用（リターンキーで閉じる）</h2>

<p>よく見かけるパターン。<br/>
キーボードのリターンキーで、キーボードが閉じる。</p>

<ul>
<li><UITextFieldDelegate>プロトコルを接続（.hの@interface部分）</li>
<li>.mにデリゲートメソッドを追加</li>
<li>処理を記述</li>
</ul>


<p>```objective-c ViewController.h
@interface ViewController : UIViewController<UITextFieldDelegate></p>

<p>@end
```</p>

<p>```objective-c ViewController.m
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// デリゲートを設定
_textField.delegate = self;
</code></pre>

<p>}</p>

<ul>
<li>(BOOL)textFieldShouldReturn:(UITextField *)textField
{
  // これか
  [self.view endEditing:YES];
  // これ
  [_textField resignFirstResponder];
  return YES;
}
```</li>
</ul>


<h2>Tap Gestureを使用（他の場所をタップで閉じる）</h2>

<p>キーボードのリターンキーではなく、他の場所をタップした際にキーボードを閉じる。</p>

<ul>
<li>StoryBoard上で、ViewControllerに Tap GestureRecognizer を追加</li>
<li>Ctrl + ドラッグでアクション接続</li>
<li>処理を記述</li>
</ul>


<p>```objective-c ViewController.m
&ndash; (IBAction)onTapView:(id)sender
{</p>

<pre><code>// これか
[self.view endEditing:YES];
// こんな感じ
if ([_textField isFirstResponder]) {
    [_textField resignFirstResponder];
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>

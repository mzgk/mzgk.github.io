<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | jubilee]]></title>
  <link href="http://mzgk.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mzgk.github.io/"/>
  <updated>2014-08-05T18:15:03+09:00</updated>
  <id>http://mzgk.github.io/</id>
  <author>
    <name><![CDATA[mzgk]]></name>
    <email><![CDATA[mzgkworks@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIButtonでタップ毎にボタン画像を切替える]]></title>
    <link href="http://mzgk.github.io/blog/2014/change-image-of-button-to-tap-each/"/>
    <updated>2014-08-05T18:11:27+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/change-image-of-button-to-tap-each</id>
    <content type="html"><![CDATA[<p>UIButtonをトグルスイッチのように使う方法。<br/>
プレイボタン　→　タップ　→　ストップボタン　→　タップ　→　プレイボタン</p>

<h2>ボタンに画像を設定する</h2>

<p>viewDidLoadなど。画像はアセットカタログに登録済み。</p>

<p><code>objective-c
// 通常（プレイ）
[_button setImage:[UIImage imageNamed:@"playButton"] forState:UIControlStateNormal];
// プレイでボタンをタップ中
[_button setImage:[UIImage imageNamed:@"stopButton"] forState:UIControlStateHighlighted];
// ストップ
[_button setImage:[UIImage imageNamed:@"stopButton"] forState:UIControlStateNormal | UIControlStateSelected];
// ストップでボタンをタップ中
[_button setImage:[UIImage imageNamed:@"playButton"] forState:UIControlStateHighlighted | UIControlStateSelected];
</code></p>

<h2>ボタンタップアクション</h2>

<p>```objective-c
&ndash; (IBAction)userButtonTapped:(UIButton *)sender {</p>

<pre><code>sender.selected = !sender.selected;   // これが重要（状態を入れ替える）
// プレイをタップ
if (sender.selected) {
    _userTimer = [NSTimer scheduledTimerWithTimeInterval:[_userFrameSpeedInfos[0] floatValue]
                                                  target:self
                                                selector:@selector(timerUserView:)
                                                userInfo:nil
                                                 repeats:YES];
}
// ストップをタップ
else {
    [_userTimer invalidate];
}
</code></pre>

<p>}
```</p>

<h2>おまけ</h2>

<p>タイマーが停止した時にボタンをプレイに戻す。</p>

<p>```
 &ndash; (void)timerUserView:(NSTimer*)timer
{</p>

<pre><code>int index = ++_userFramIndex;
if (index &lt; [_userFrameImageInfos count]) {
    [self displayFrameImageAtIndex:index userDistinction:USER];
}
// タイマーを止める
else {
    [timer invalidate];
    _userFramIndex = 0;
    [_userButton setSelected:NO];   // これでプレイに戻る
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIImageViewにスワイプジェスチャーを適用させる]]></title>
    <link href="http://mzgk.github.io/blog/2014/applied-to-uiimageview-swipe/"/>
    <updated>2014-08-05T18:06:46+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/applied-to-uiimageview-swipe</id>
    <content type="html"><![CDATA[<p>通常に設定（コード or Interface Builder）からだけでは、反応しない。<br/>
UIImageViewの初期値が「User Interaction Enabled = NO」になっているので、
以下を設定。（Interface Builderからでも、Attributte Inspector &ndash; View &ndash; User Interaction Enabledのチェックで可）</p>

<p><code>objective-c
[_imageView setUserInteractionEnabled = YES];
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINavigationBarの色を制御する]]></title>
    <link href="http://mzgk.github.io/blog/2014/set-navigationbar-color/"/>
    <updated>2014-08-05T18:01:40+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/set-navigationbar-color</id>
    <content type="html"><![CDATA[<p>NavigationBarのカラーやアイテムの色を制御する方法。<br/>
NavigationControllerの次のViewControllerで設定を行う。</p>

<p><code>objective-c
// 背景色
self.navigationController.navigationBar.barTintColor = [UIColor colorWithHex:@"2F78B7"];
// アイテムの色
self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
// タイトルの色
self.navigationController.navigationBar.titleTextAttributes = @{NSForegroundColorAttributeName:[UIColor whiteColor]};
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableViewのセルのハイライト制御]]></title>
    <link href="http://mzgk.github.io/blog/2014/cell-highlight/"/>
    <updated>2014-08-05T17:49:14+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/cell-highlight</id>
    <content type="html"><![CDATA[<p>セルをタップして詳細画面に遷移した後に、戻ってきた時、タップしたセルのハイライトが残っている。<br/>
このハイライトを消す方法。<br/>
UITableViewControllerを使用しているぶんには、特に意識する必要はない。</p>

<h2>UITableViewControllerを継承してUITableViewを使う場合</h2>

<p>UITableViewControllerのviewWillAppear:にはハイライト解除の処理が定義してある。<br/>
なので、viewWillAppear:メソッドをオーバーライドするときは、必ず親クラスのviewWillAppear:メソッドを呼ぶこと。</p>

<p><code>objective-c
- (void)viewWillAppear:(BOOL)animated
{
  // 必ずこれを呼ぶこと
  [super viewWillAppear:animated];
}
</code></p>

<h2>UITableViewControllerを継承せずにUITableViewを使う場合</h2>

<p>自分で実装すること。</p>

<p><code>objective-c
- (void)viewWillAppear:(BOOL)animated
{
  [super viewWillAppear:animated];
  // ハイライト解除
  [_tableView deselectRowAtIndexPath:[_tableView indexPathForSelectedRow] animated:YES];
}
</code></p>

<h2>参考</h2>

<p><a href="http://d.hatena.ne.jp/glass-_-onion/20090324/1237864499">http://d.hatena.ne.jp/glass-_-onion/20090324/1237864499</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableViewのセル編集をさせない方法]]></title>
    <link href="http://mzgk.github.io/blog/2014/not-allowed-to-edit-cell/"/>
    <updated>2014-08-05T17:42:38+09:00</updated>
    <id>http://mzgk.github.io/blog/2014/not-allowed-to-edit-cell</id>
    <content type="html"><![CDATA[<p>セルスワイプでの削除をやめる方法。<br/>
セルの編集を許可するかどうかを返すメソッドでNOを返す。</p>

<p>```objective-c
&ndash; (BOOL)tableView:(UITableView <em>)tableView canEditRowAtIndexPath:(NSIndexPath </em>)indexPath
{</p>

<pre><code>// Return NO if you do not want the specified item to be editable.
// TODO: セル削除を可能にする時はYESに変更すること
return NO;
</code></pre>

<p>}
```</p>

<p>もしくは、以下のメソッドをコメントアウト。</p>

<p>```objective-c
&ndash; (void)tableView:(UITableView <em>)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath </em>)indexPath
{</p>

<pre><code>if (editingStyle == UITableViewCellEditingStyleDelete) {
    [_objects removeObjectAtIndex:indexPath.row];
    [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
} else if (editingStyle == UITableViewCellEditingStyleInsert) {
    // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
